%!PS-Adobe-3.1
%ADO_DSC_Encoding: Windows Roman
%%Title: <FEFF0056006900730069006F002D004D004300534E2D6570636E53EF976060274FDD8BC1006600720061006D00650077006F0072006B002E00700064006600000000004000200000000000000000353002720000000000000000A77C0C64000100F000010000002000186441626F206563416F72616220742E39>
%%Creator: Adobe Acrobat 9.0.0
%%For: ztq
%%CreationDate: 2015/10/9, 10:52:54
%%BoundingBox: -1 0 528 216
%%HiResBoundingBox: 0 0 527.8682 215.3396
%%CropBox: 0 0 527.8682 215.3396
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1044 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2015-10-09T10:49:47+08:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2015-10-09T10:52:37+08:00"
   xmp:MetadataDate="2015-10-09T10:52:37+08:00"
   pdf:Producer="Acrobat Distiller 9.0.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:f4094e2d-eaf5-4cab-b4b5-58c91e236d6f"
   xmpMM:InstanceID="uuid:68a549ae-23b8-419f-ac42-3164a052924f">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [527.868 215.34 ] >> setpagedevice
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -215.34 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 215.34 li
527.868 215.34 li
527.868 0 li
cp
clp
[1 0 0 1 -25.5118 0 ]ct
88.62 140.34 mo
166.56 140.34 li
166.56 93.5396 li
88.62 93.5396 li
cp
false sop
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
1.2 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
88.62 140.34 mo
166.56 140.34 li
166.56 93.5396 li
88.62 93.5396 li
cp
.75021 .679683 .670222 .90164 cmyk
@
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CUFAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /CUFAAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3210325d84000000cc000000606376
7420aa86dc6e0000012c0000065a6670676dc9bcda0500000788000007c1
676c79666b8f384a0000a364000054ec68656164e2dbd49700000f4c0000
003668686561123318cd00000f8400000024686d747805e77af300000fa8
000040106c6f63610538d91800004fb8000040146d61787015750f990000
8fcc000000206e616d6567a7ac6e00008fec0000078e707265708d21ed41
0000977c00000be767646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002affc00078430000000900000000544d432000400020
fffc05d3fe510133073e01b2400001ffffff0000042605bb000000200015
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
0471048304f900004046585756555441403f3e3d3c3b3a39383735343332
31302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161514
131211100f0e0d0c0b0a090807060504030201002c4523466020b02660b0
04262348482d2c452346236120b02661b004262348482d2c45234660b020
6120b04660b004262348482d2c4523462361b0206020b02661b02061b004
262348482d2c45234660b0406120b06660b004262348482d2c4523462361
b0406020b02661b04061b004262348482d2c0110203c003c2d2c20452320
b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920
b09051582320b00d44235921212d2c20204518684420b001602045b04676
688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0
172370b101173e01b0172370b10217453ab10200080d2d2c45b01a234445
b01923442d2c2045b00325456164b050515845441b2121592d2cb0014363
2362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d
2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b003
61592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb0
1243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a87
20b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb0
022546608a46b040618c482d2c4b53205c58b002855958b00185592d2c20
b0032545b019234445b01a23444565234520b00325606a20b00923422368
8a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b0
3f1b235961441cb114008a5279b31940201945208a54582321b03f1b2359
61442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d
2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d
2c4b525845441b2121592d2c0120b003252349b04060b0206320b0005258
23b002253823b002256538008a63381b212121212159012d2c4bb0645158
4569b00943608a103a1b212121592d2c01b005251023208af500b0016023
edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500ed
ec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2b
b02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802232370
1020b802234520b0005058b00161593a2f182d2c21210c6423648bb84000
622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21
b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648b
b84000626023212d2cb4000100000015b00826b00826b00826b008260f10
161345683ab001162d2cb4000100000015b00826b00826b00826b008260f
1016134568653ab001162d2c4b53234b515a5820458a60441b2121592d2c
4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b54
58381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54
b012435c5a58381b2121592d2cb012435c580cb00425b00425060c642364
6164b807085158b00425b00425012046b01060482046b0106048590a2121
1b2121592d2cb012435c580cb00425b00425060c6423646164b807085158
b00425b00425012046b8fff060482046b8fff06048590a21211b2121592d
2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121
592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426
024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b00425b0042549
b00425b00425496120b0005458212043b0005558b00325b00325b8ffc038
b8ffc038591bb04054582043b0005458b00225b8ffc038591b2043b00054
58b00325b00325b8ffc038b8ffc0381bb00325b8ffc03859595959212121
212d2c462346608a8a462320468a608a61b8ff8062232010238ab902c202
c28a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2c
b1020042b123018851b1400188535a58b910000020885458b20201024360
4259b12401885158b920000040885458b2020202436042b12401885458b2
022002436042004b014b5258b2020802436042591bb940000080885458b2
02040243604259b94000008063b80100885458b202080243604259b94000
010063b80200885458b202100243604259b12601885158b94000020063b8
0400885458b202400243604259b94000040063b80800885458b202800243
604259b12801885158b94000080063b81000885458ba0002010000024360
42595959595959592d2cb0024354584b53234b515a58381b2121591b2121
2121592d2cb0572b580c028a4b53b004264b515a580a381b0a2121591b21
212121592d2c20b0024354b00123b05f237821b1000243b056237921b002
4323b020205c58212121b100471c598a8a208a208a23b81000635658b810
00635658212121b1012c1c591b2159b08062205c58212121b1001b1c5923
b08062205c58212121b1000c1c598ab00161b8ffb31c23212d2c20b00243
54b00123b07b237821b1000243b072237921b10002438ab020205c582121
21b0631c598a8a208a208a23b81000635658b81000635658b00426b0015b
b00426b00426b004261b21212121b13600231c591b2159b0042623b08062
205c588a5c8a5a23212321b01d1c598ab08062205c5821212321b00e1c59
b00426b00161b8ff981c23212d000000000100000006d99a532e794f5f0f
3cf5081b080000000000a2e3272a00000000ce15891cfaaffd6710000851
00000009000100010000000000010000073efe4e00431000faaffa7a1000
000100000000000000000000000000001004060001000000000002390000
02390000023900b002d7005e0473001504730049071d0077055600580187
005a02aa007c02aa007c031d004004ac0072023900aa02aa0041023900ba
0239000004730055047300df0473003c047300560473001a047300550473
004d047300610473005304730055023900b9023900aa04ac007004ac0072
04ac00700473005a081f006f0556fffd0556009605c7006605c7009e0556
00a204e300a80639006d05c700a4023900bf040000370556009604730096
06aa009805c7009c063900630556009e0639005805c700a10556005c04e3
003005c700a105560009078d0019055600090556000604e300290239008b
023900000239002703c100360473ffe102aa00590473004a047300860400
0050047300460473004b02390013047300420473008701c7008801c7ffa2
0400008801c7008306aa00870473008704730044047300870473004802aa
00850400003f02390024047300830400001a05c700060400000f04000021
0400002802ac0039021400bc02ac002f04ac00570556fffd0556fffd05c7
0068055600a205c7009c0639006305c700a10473004a0473004a0473004a
0473004a0473004a0473004a040000500473004b0473004b0473004b0473
004b023900bd023900230239ffe502390009047300870473004404730044
047300440473004404730044047300830473008304730083047300830473
0049033300800473006b0473001b0473005102cd006d044c000104e30099
05e5000305e50003080000e102aa00de02aa003d0464004e080000010639
005305b4009a0464004e0464004d0464004d0473fffd049c00a003f40038
05b4007a069600a1046400000231000002f6002f02ec002d0625007f071d
004404e3008104e3009e02aa00e804ac0072046400540473002e04640033
04e5001a047300860473008c080000ef0556fffd0556fffd063900630800
0081078d00520473fffc0800000002aa005302aa004701c7008001c7006c
0464004e03f4002f04000021055600060156fe390473ffe402aa005c02aa
005c040000170400001704730049023900b901c7006c02aa004708000025
0556fffd055600a20556fffd055600a2055600a20239008d0239ffe00239
00040239001506390063063900630639006305c700a105c700a105c700a1
023900c602aa001902aa000602aa001d02aa002e02aa00e502aa00a202aa
006b02aa003a02aa004b02aa00280473000001c700030556005c0400003f
04e3002904000028021400bc05c7fffd0473004905560006040000210556
009e0473008704ac007204ac00a102aa006b02aa001902aa002106ac006b
06ac006b06ac0021047300000639006d04730042023900b10556005c0400
003f05c700660400005005c700660400005004730046046bffe102aa00ee
0556fffd0473004a0556fffd0473004a05c7009e04eb004705c7fffd0556
00a20473004b055600a20473004b0473009601c700420473009602550088
0473009602ac008305c7009c0473008705c7009c04730087063900630473
004405c700a102aa008505c700a102aa003c0556005c0400003f04e30030
0239002404e300300300002305c700a10473008305c700a10473008304e3
00290400002804e3002904000028046800a4063900600662005504a00048
047400480391006204f000440329002e05300048046bffe1040000b002eb
005208c000330800004f040000990800004f040000990800004f04000098
0400009807d5016a05c0009e04ab007204d5009d04ac007104d5022204d5
010505abffe9050001c905ab027e05abffe905ab027e05abffe905ab027e
05abffe905abffe905abffe905abffe905abffe905ab01c005ab027e05ab
01c005ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c0
05abffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
02d605ab006605abffea05d5ffff04d500920800000007eb013007eb0120
07eb013007eb012004d500b204d5008004d5002a082b0198086b01b80755
0010060000f40600006f0440003a0540003704c0003f0415004004000025
0600005505e100bf038d008904d5ffd90180008002d50086071500610296
000f04d5009202d6008302d6008304d500b202d600700556fffd0473004a
05c700660400005005c7006604000050055600a20473004b055600a20473
004b055600a20473004b0639006d047300420639006d047300420639006d
0473004205c700a40473008705c7001f047300060239ffce0239ffce0239
ffe40239ffe40239fff60239fff50239004b01c700190400003701c7ffa2
0556009604000088040000860473009601c7006a05c7009c0473008705c9
00a50473008b0639006304730044063900630473004405c700a102aa006a
0556005c0400003f04e300300239000c05c700a10473008305c700a10473
008305c700a10473008305c700a104730083078d001905c7000605560006
0400002101c700890556fffd0473004a08000001071d00440639005304e3
0081023900b9078d001905c70006078d001905c70006078d001905c70006
055600060400002101c7008a02aaffe10473001b04cd005a06ac006b06ac
002206ac002206ac004a02aa00e202aa006b02aa00de02aaffea0557ffff
0646ffa706b4ffa80312ffa80632ffa706d8ffa70605ffa701c7ff780556
fffd055600960558fffe055600a204e3002905c700a4023900bf05560096
0558000b06aa009805c7009c0533006d0639006305c700a40556009e04f2
009404e30030055600060556000906af007f05fb00610239000405560006
04a00048039100620473008b01c7006b04600088049a008c040000190387
00480473008b0473005c01c700890400008604000018049c00a00400001a
0395005c04730044048d008303db0056046000880433001105b4007a063f
005701c7ffc9046000880473004804600088063f0057055700a206eb0032
045500a105c000640556005c023900bf02390004040000370875000d0815
00a406d5003104a900a10515000a05c000a00556fffd054000a705560096
045500a1056b0000055600a20763000704d5004e05c000a105c000a104a9
00a10540001206aa009805c700a40639006305c000a00556009e05c70066
04e300300515000a061500520556000905eb009f05550057075500a10780
00a106550000071500a8054000a505c00055081500a405c7001a0473004a
0495005b0440008802eb008804ab00000473004b055afffb03ab00320478
0087047800870380008604ab00180580008c046b00880473004404550088
047300870400005003aa0026040000210695004b0400000f0495008a042b
0045066b008d0695008d0500002805c0008b042b00840415003006000089
0455001f0473004b0473000002eb00890415004b0400003f01c700880239
000901c7ffa20740001306800083047300000380008604000021046b0088
03e900a1034a008808000041089500a00585002d00000000000000000000
00000000000000000000000000000000000000000000000000000000ffac
00000000000001010000ffce0310007d0000ff37023300d20000030b0000
ff04023900b90481006904560032033100190411002d04d1009601f9009b
030f005f04ca009b04b8008c01f9009b0413002803b0005003b4003c04ca
009b04cf005001f9009b02d2003c0498005a043c00190488006e045f0073
03b1001903d4000a0466009604130028058e00640524002803f2009b03f2
009b03f2009b01e3005a0356005a0686009b01f900460413002804130028
03b4ff4903b4ff490448002d058e0064058e0064058e0064058e00640481
0069048100690481006904560032033100190411002d04d10096024b0000
034a000004b8008c024b00000413002803b0005003b4003c04cf005002d2
003c0498005a0488006e045f007303d4000a0466009604130028058e0064
0524002801f9009b0456003203b00050045f0073049b003c0000ffdc0000
ff250000ffdc0000fe51028d00ab028d00a002da0043034d007901a8ffba
000000460000004600000046000000460000004800000046000000460000
00460435017c0435012e043500b7043500810435012c043500be043500af
043500810435009a043500db04350085028d00c0043500b3060001000600
010002420036060001000435009e04350098043500cb0600010006000100
060001000600010006000100000000460600010006000100060001000600
010006000100060001000600010006000100051bffba0600010006000100
0600010005b5003a05b5003a01f4ffba01f4ffba06000100060001000600
0100060001000481003604350036043dffba043dffba03e9004a03e9004a
067f0014077600140327ffba041effba067f0014077600140327ffba041e
ffba051b003204b500240300fff706000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010000000030000000460000004600000040
0000004606000100060001000000ffdc0000fe510000ff160000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ff160000ffdc
0000ff160000ffdc0000ff200000ffdc0473004a08000000060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000600010006000100028d0011028d00300600010004ee
0015034d007901a8001301d6ffd701a8005601d600100375003203750032
01a8002d01d60013051b003204b5002401f4ffba01f4ffba01a8009301d6
001305b5003a05b5003a01f4ffba01f4ffba024200000300fff705b5003a
05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba02b3005f02b3005f02b3005f02b3
005f03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5
ffba06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba
04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba045a002a039a
00360435ffba0327ffba045a002a039a00360435ffba0327ffba064f0027
064f00270224ffba021affba04a7004604a700460224ffba021affba04cf
002d04cf002d0327ffba0327ffba040d0047040d004701a8ffba01a8ffba
02b4002302b400230327ffba0327ffba043500450435004501f4ffba01f4
ffba024200360300fff7039affba0327ffba0375003203750032051b0032
04b50024051b003204b5002401f4ffba01f4ffba045a003104ce0041045a
002604ce0039045a005304ce004a045a005304ce004a0600010006000100
000000460000004606000100060001000600010000000046000000460600
010006000100000000480000004606000100060001000600010000000046
000000460000004600000046000000400000003006000100000000460000
004606000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100028d00ca028d00c7028d00c606000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
01000600010006000100060001000600010006000100060001000100ffba
0800ffba1000ffba06dc0063053f004406d500a1055b00830000fddc0000
fc2f0000fca60000fe540000fcd70000fd730000fe290000fe0d0000fd11
0000fc670000fd9d0000fbf50000fc720000fed50000fed50000ff02041b
00a006ac006b06ac00190000feb60000fd730000fe080000fca60000fe53
0000fd110000fbc80000faf40000faaf0000fc720000fbaa0000fb6a0000
fcf10000fc7d0000fbdd0000fcc10000fb980000fdea0000fe840000fdc2
0000fcf10000fd5f0000fe760000febc0000fceb0000fd6c0000fd580000
fc900000fd150000fc2c0000fc130000fc120000fb960000fb9601c70088
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd
0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556
fffd0473004a055600a20473004b055600a20473004b055600a20473004b
055600a20473004b055600a20473004b055600a20473004b055600a20473
004b055600a20473004b0239006301c7001f023900ba01c7007c06390063
047300440639006304730044063900630473004406390063047300440639
0063047300440639006304730044063900630473004406dc0063053f0044
06dc0063053f004406dc0063053f004406dc0063053f004406dc0063053f
004405c700a10473008305c700a10473008306d500a1055b008306d500a1
055b008306d500a1055b008306d500a1055b008306d500a1055b00830556
000604000021055600060400002105560006040000210556fffd0473004a
0239ffe201c7ffb0063900630473004405c700a10473008305c700a10473
008305c700a10473008305c700a10473008305c700a1047300830000fefe
0000fefe0000fefe0000fefe0455fffd02eb000c07630007055afffb04a9
00a10380008604a900a10380008605c700a4046b00880473fffd04000014
0473fffd04000014055600090400000f05550057042b0045055500a10473
00870605006304730055063900600473004405b5003a01f4ffba0224ffba
021affba04a7004601f4009e01f4001001f4001b01f4001001f4006b01f4
fff90227ffce0000000f0000fff502aa00a402aa00a40000001300000056
000000560000ffcf01a8000f01d6ffbf01a8fff501d6ffcd01a8001d01d6
fff501a8009301d6001303750032037500320375003203750032051b0032
04b5002405b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba0481003604350036043dffba043d
ffba02b3003202b3003202b3005f02b3005f02b3005f02b3005f02b30032
02b3003202b3005f02b3005f02b3005f02b3005f02b3005f02b3005f02b3
003802b3003802b3004902b3004903e9004a03e9004a03e9004a03e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0692003e0692003e043fffba043fffba0692003e0692003e043f
ffba043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e
06c5ffba06c5ffba04a7ffba04a7ffba045a002a039a00360435ffba0327
ffba064f0027064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba064f0027064f00270224ffba021affba064f0027064f
00270224ffba021affba064f0027064f00270224ffba021affba04a70046
04a7004604a7004604a70046093e0032093e00320740ffba0740ffba067f
0014077600140327ffba041effba04cf002d04cf002d0327ffba0327ffba
04cf002d04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba067f0014077600140327ffba041effba040d0047040d0047
01a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d
004701a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba04350045
0435004501f4ffba01f4ffba043500450435004504350045043500450435
00450435004501f4ffba01f4ffba04350045043500450481003604350036
043dffba043dffba024200360300fff7031a001a031a001a031a001a0375
003203750032037500320375003203750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
0032051bffba04b5ffba051b003204b5002401f4ffba01f4ffba03750032
03750032051b003204b5002401f4ffba01f4ffba051b003204b50024067f
0045067f0045067f0045067f004501a800280000fe290000fea20000fef3
0000ff1d0000ff120000ff920000fe7e08fc003208ad00320000ff880000
ffaf0000ff3f0000ff640000fe7e0000ff36018d000002f6fffd0000fe82
0000ff1004cd00320000ff580000ff580000ff640692003e0692003e043f
ffba043fffba08c9003e08c9003e06c5ffba06c5ffba045a002a039a0036
0435ffba0327ffba034d007902b400230242003601f4ffba0290ffba01f4
002f01f4003b01f4001201f400b101f4006d067f00140776001401f9009b
0000fee002bc000003f2009b045afff504cefff5045a005304ce004a045a
005304ce004a045a005304ce004a045a005304ce004a045a005304ce004a
045a005304ce004a04350071043500ad045a000f04ce000f047300140611
0014054000a7047300860540000a0473000a05c7005105c7006604000050
05c7fffd067a00140540004a04730046047400480556006e04d5005304e3
ffc40639006d04fe000f070c008701c700830239001f0556009604000088
01c7001504000018072000a405c7ffb80473008b0639006006f200630557
004406090014047300860556009e0556006b0400004f04f20094030b0044
0239002404e300140239002404e3003005fb006105c700a1062e00100400
002104e300290400002804e3002904e30031045c0044045c003f0473003c
0473005503ab003203e5002404730087021400bc034e00bc04ac00720239
00b00aaa009e09c7009e08640046087f009606aa0096039c008309c7009c
078e009c062b0087047300550556fffd0473004a0000fefe0556fffd0473
004a08000001071d00440639006d0473001a0639006d0473004205560096
040000880639006304730044063900630473004404e30029045c004c01c7
ffa20aaa009e09c7009e086400460639006d04730042084600a404f2009e
05c7009c047300870556fffd0473004a0556fffd0473004a055600a20473
004b055600a20473004b0239ff8a0239ff64023900040239fff606390063
04730044063900630473004405c700a102aaffcc05c700a102aa006805c7
00a10473007605c700a1047300830556005c0400003f04e3003002390024
045c0051037e001305c700a40473008705a600a404d6005e0486005e04e3
0029040000280556fffd0473004a055600a20473004b0639006304730044
0000fefd0639006304730044063900630473004406390063047300440556
000604000021047300570473004804730086047300860400001304000050
04730046047300460473005505e9005503ab004903ab0032050d0032040f
00440239ffb90473004204730042047800500402001904ef00190473008b
047300870473008701c7001901c7005702d90044029e0000026e001401c7
00830493008306aa008406aa008406aa00870473ffa60473008b046c0087
0473004406530044063f00570466004402aaffe402aaffe402aaffe402aa
008502aa008502aa008502aaffe40455008a0455008a0400003f01c7ffa2
0214ffb901c7ff7202cb00000239000f0239002404730019048c00540460
00880400001a05c7000604000018042800190400002804540028045c004c
045c0079040000240400005004000024040000500639006304400088040f
004904780050046b0088032e000004000008033b00880473004804000024
0400005007b7004607400046080b004605b30024036f002405c00024061c
0013054a0083050f008303e2001e0438006303110064031100640146ffce
01eb006401eb000001eb000002ea006403d90000029100000187005a02d7
005e01c7008001c7006c01c7008a02aa00fb02aa00fb02ca003202ca0032
04ac007004ac007004ac006504ac006502aa012102aa00de02aa005902aa
012102aa001d02aa005902aa00de023900b6023900b602aa00fb02aa00fb
02aa00a602aa00a602aa00a602aa001d02aaffe202aafffb029400000142
006402b8003202a0000002ca003203100096031000960310009603100096
0310009602aa006202aa006202aa002802aa001d02aa0047045700960457
009604570096045700960457004304570043045700430457004304570043
031000430457002f0457002f0457002f0457002f0457002f0310002f0457
0025045700250457002504570025045700250310002f0457001a0457001a
0457001a0457001a0457001a0310001a0457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
04570042045700420457004204570042031000420457002f0457002f0457
002f0457002f0457002f0310002f0457002f0457002f0457002f0457002f
0457002f0310002f04570026045700260457002604570026045700260310
002604570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
004203100042045700260457002604570026045700260457002603100026
0457002304570023045700230457002304570023031000230457002f0457
002f0457002f0457002f0457002f0310002f0457004b0457004b0457004b
0457004b0457004b0310004b045700960457009604570096045700960457
004204570042045700420457004204570042031000420457001a0457001a
0457001a0457001a0457001a0310001a0457002404570024045700240457
002404570024031000240457002f0457002f0457002f0457002f0457002f
0310002f0457004e0457004e0457004e0457004e0457004e0310004e0457
00960457009604570096045700960000fec10000fec60000fdac0000fed8
0000ff920000fee90000ff4c0000fea00000fec40000ffce0000ff660000
fea00000fed80000fed80000ff970000ff980000ff990000fff40000ff42
0000ff420000ff440000ff5f0000fe870000ffec0000ffa60000ff510000
ff510000ff510000fec90000ff1c000000000000fee90000ff4c0000ff93
0000ff2a0000ff560000ffce0000fe870000febb0000fec40000fec40000
fed80000fed80000feb30000fec90000fdad0000fec80000feb30000fec9
0000fdad0000fe160000fee60000ffa60000fe870000ff440000feba0000
ff230000ff9a0000fdac0000fe88000000000000feb00000ff980000fe93
0000ffa60000fe870000fe1c0000ff660000ff440000feb00000feb00000
feb00000ff030000ff520000fd1f0000ff530000ff530000ff530000feb5
0000feb50000ffc30000feae0000fedc0000fec70000fec80000fedc0000
fe1e0000ff420000ff510000feb70000feb002aa00de02aa005902aa00fa
049a007004600000062e001407aa0000062e0014047b004c063f005704cf
0044063900630473004405c700700400005004e300a8033b008804ff0000
043c0032060d000a049d0042072000a406aa0084056500630473008b0564
00a40400000a0556006b0556006b04e0000504c5001905e5005f046e0044
03b600140347002804cf00440495005b0400005001c7ffa2063900600389
004d03890050055600a205c000a10473004b047800870ab4006d04fe0010
0639001404e70014079900bf05b500880558000104000006072e00bf0590
008806a10078057b007a086d00bf06f0008804d5006603ab001f065f0039
058200480639006004730044066d0009050c001a066d0009050c001a0898
0063072c004406aa002004e6001c0987006d06d000500000fe370ab4006d
04fe001005c7006604000050040700140000fea60000febc0000ff980000
ff980000fc2b0000fc4c05c000a10478008705400004042b00140556009e
04730087055d00a40464008804d5004e03ab003204a900040380000005ef
002904490028070900a4052f0088091800a006f600880606003e042b0023
05c700660400005004e3003003aa0026076700310587002605550057042b
004506e4000a0554000a06e4000a0554000a023900bf07630007055afffb
055700a1046800860540001204ab001805c700a4046b008805c700a4046b
008805550057042b004506aa00980580008c02aa002e0556fffd0473004a
0556fffd0473004a08000001071d0044055600a20473004b060500630473
005507630007055afffb04d5004e03ab003204d5004e045c004c05c000a1
0478008705c000a1047800870639006304730044063900600473004405c0
004a0415002b0515000a040000210515000a040000210515000a04000021
05550057042b0045071500a805c0008b0540004a0473004607bf004a0703
004607a6006606860053054d00660413005307c3001207470018084600a4
070700880639006d0478005005f90030055300260000ff430000ff290000
ff6a0000ffac0000ff590000ff560000ff730000fed70000fe5c0000005e
0000ff560000ff56000000500000ff0b0000fe550000ff430000ff5c0000
ff750000ff640000ff560000ff0b0000ff8a0000ff560000ff430000ff43
0000ff640000ff75000000500000fddd0000ff750000ffad0000fefe0000
fefe0000fedf0000fedf0000ff580000ff200000fefe0556fffd0473004a
05560096047300860556009604730086055600960473008605c700660400
005005c7009e0473004605c7009e0473004605c7009e0473004605c7009e
0473004605c7009e04730046055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b055600a20473004b04e300a802390013
0639006d0473004205c700a40473008705c700a40473008705c700a40473
008705c700930473006805c700a4047300870239ffdf01c7ff9202390020
023900060556009604000088055600960400008805560096040000880473
009601c7007e0473009601c7ffb90473009601c7ffa50473009601c7ffa3
06aa009806aa008706aa009806aa008706aa009806aa008705c7009c0473
008705c7009c0473008705c7009c0473008705c7009c0473008706390063
047300440639006304730044063900630473004406390063047300440556
009e047300870556009e0473008705c700a102aa008505c700a102aa0085
05c700a102aa005e05c700a102aa00260556005c0400003f0556005c0400
003f0556005c0400003f0556005c0400003f0556005c0400003f04e30030
0239002404e300300239002404e300300239ffff04e300300239000e05c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
05c700a104730083055600090400001a055600090400001a078d001905c7
0006078d001905c70006055600090400000f055600090400000f05560006
0400002104e300290400002804e300290400002804e30029040000280473
00870239000305c70006040000210473004a01c7008904a0004804a00048
04a0004804a0004804a0004804a0004804a0004804a000480556fffd0556
fffd06820013068200130682001306820013068200560682005603910062
0391006203910062039100620391006203910062061e0000061e0000076c
0000076c0000076c0000076c00000473008b0473008b0473008b0473008b
0473008b0473008b0473008b0473008b068f0000068f0000081f0000081f
0000081f0000081f0000081ffff3081ffff301c7008101c7008101c7ff9b
01c7ff9b01c7ffeb01c7ffeb01c7ffa201c7ffa203010000030100000491
00000491000004910000049100000491fff30491fff30473004404730044
04730044047300440473004404730044069d0000069d0000082d0000082d
000007c9000007c900000460008804600088046000880460008804600088
0460008804600088046000880682000007ae00000812000007ae0006063f
0057063f0057063f0057063f0057063f0057063f0057063f0057063f0057
065f0000065f000007ef000007ef0000078b0000078b0000078bffff078b
ffff04a0004804a0004803910062039100620473008b0473008b01c7ffe6
01c7006804730044047300440460008804600088063f0057063f005704a0
004804a0004804a0004804a0004804a0004804a0004804a0004804a00048
0556fffd0556fffd06820013068200130682001306820013068200560682
00560473008b0473008b0473008b0473008b0473008b0473008b0473008b
0473008b068f0000068f0000081f0000081f0000081f0000081f0000081f
fff3081ffff3063f0057063f0057063f0057063f0057063f0057063f0057
063f0057063f0057065f0000065f000007ef000007ef0000078b0000078b
0000078bffff078bffff04a0004804a0004804a0004804a0004804a00048
04a0004804a000480556fffd0556fffd0556fffd0556fffd0556fffd02aa
00e502aa00fd02aa00e502aa000602aa00060473008b0473008b0473008b
0473008b0473008b068200000682000006f3000006f3000005c700a402aa
001302aa001302aa000601c7ffbb01c7ffab01c7ffca01c7ffca01c7ff93
01c7ff930239001a0239fff5036500000365000002aa001302aa001302aa
000604600088046000880460008804600088048d0083048d008304600088
04600088055600060556000606e6000007180000061e000002aaffea02aa
ffea02aa0059063f0057063f0057063f0057063f0057063f005707650000
069d000007270000065f000005fb006102aa00de02aa00e50473000d05c7
006605c7006606aa008705c70024095000a1078d00190556001f04e30030
080000290400003004c100660000ff530000ff530000ff530000ff5301c7
001901c7ffa2042b0005055600110574004602cbffa3057a008702f0ffc8
057f000a057f000a02aa008402aa008402aa00c902aa00c902aa00a002aa
005902aaffaf02aa003a02aa0006023900b902aa00a902aa00a902aa00a9
02aa00a9032e001e032e001e02aa003a0000ff730000ffa50000fed80000
ff230000ff720000ff720000fee70000ffa50000ff530000ff530000ff53
0556009e0473008703f8001905fb0019071d004404400019040000500469
00870469001903eb008703ab003201c70088036100410400008803360010
0580008c04780087047300440400001304de004404de004404de000d078d
005003a800440473004404730044042b00840455001f0455001f03aa0026
0460008804c6004405de004404c600440400001a05c700060400002803ab
0032036b003f04db001f02eb00880400001a04550088042b008405b4007a
04ab001803a00000054f0000035100320351ffd103980032034800320348
003203f80032036e0032015600690284002d0366003202d0003204150032
03710032036f003204180032030f003203590032039c003203760031036f
003204fb000002fa003202fa00320304003204cc00320305006403050032
02f9003202f90032028c0032028c0032030400320142006402b600640495
0064030f00640305003202d5003203050032030500320306006401c20032
030f00640342003204950064029200000320000003150064029200000306
00320385003202bf00000142006401eb0064030f00640292000003150064
02920000030900320385003202bf0000077d00460a660046038300460a2f
00460541ffba01e9003c045a00110000ff0d0000ff350000fece0000feb7
0000fec90000ffcf0000ff4f0000ff9e0000feca02b3005f02b3005f03e9
004a03e9004a039affba0327ffba039affba0327ffba05ad0069053d002d
05fd009604dc005004e0003c05f6009b053f00280650002804ac00720000
000000000000000000000473fffc02aa005302d5ffce01a8ffba01a8ffba
01a8ffba01a8ffba0658001509c500470400000008000000040000000800
000002ab000002000000015500000473000002390000019a000000ab0000
0000000005e5000305c7006606aa00980580008c07440083071800460718
00480556fffd05c70066040000140473000a04e300300400004f04000028
04a5001d000001020000ff420000febf0000ff3a0000ff53048d000a05c7
005105c7006605c70051045500a102eb00880000ff430000ffac0000ffac
02d2009600000000021affba0250001e0000ff3a0000ff5b0000ff5f0000
ff7e0000ff940000ff4a0000fe9c05b5003a05b5003a01f4ff9601f4ff96
05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba0481003604350036043dffba043dffba0481003604350036
043dffba043dffba02b3003202b3003202b3005f02b3005f03e9004a03e9
004a0692003e0692003e043fffba043fffba045a002a039a00360435ffba
0327ffba045a002a039a00360435ffba0327ffba045a002a039a00360435
ffba0327ffba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba067f0014077600140327ffba041effba067f00140776
00140327ffba041effba067f0014077600140327ffba041effba02b40023
02b400230327ffba0327ffba02b4002302b400230327ffba0327ffba0435
00450435004501f4ffba01f4ffba043500450435004501f4ffba01f4ffba
043500450435004501f4ffba01f4ffba040d0047040d004701a8ffba01a8
ffba03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0473ff93047300460239ffbf06aaffd50473ffb70473ff9102aa
ffa402aaffa40400ffff0239ffb90400002804730089030b006404740048
0649002401c7001901c700190473001e0460001e048c000a047300860473
00460239001305b400420400008801c7fffc06aa00870473008b04730087
02aafffb0400003f0318ffa20400001a0400000f040000280473004a0473
0048047300460473004b03ab004903ab00320534005501c7008804000013
01c7ffa204730083045c004c0304006402d5003202c9003302fc0032028c
003201d5003201d500000304003203110064014200190142006401420064
01420019022a00000142006401420009023300640493006404930064030f
ffc9030f0064030e0064030500320300003202b800320142ffca01c20032
030f001d031a00320306006402d400640292000002de003202de003202de
003202f4003202ea00320000febc0000febc0000ff730000fea9023900b9
02fa003202f900320305003202a0000002f900320639006d0556fffd0473
000f05c7006602aa004104a0004804a0004804a0004804a0004804a00048
04a0004804a0004804a0004801c7ff9b01c7ffab01c7ff9b01c7ffab01c7
ff9b01c7ffbb01c7ff9b01c7ffbb04600088046000880460008804600088
0460008804600088046000880460008801c7ffab01c7ffab01c7ffbb01c7
ffbb04600088046000880460008804600088045a005304ce004a03a00013
0556001105c700290558000b055600a20473004b0400003301c7ffa205e6
00630473004805c7000002aa000f05560006040000210400001304000050
0400001301c700830455fffd02eb0001055600090400000f055600090400
000f04d5005303ab00490540001204ab00180000fec60000fed40000fec6
0000fed40000fe5f0000fe5f0000ff720000ff730000fee7078b000a03eb
004c040000130473000a01c700150473fff40556001105c700a104730019
0239ff8b05c700a404730087055600960400008804e30029040000280400
003b049e00a403670088053000480000ff530000ffbc0000fefe0000fefe
0000fea40000fea401c7008805c900a505c7009c05c900a50000fecd0000
ff480000fec90000fece0000fec50000fed00000fed10000feee0000fed6
0000fedc0000fdd90639005804730048078d001905c70006059f00a40000
feb905dc006304c60009084c001906ba0006023900b9038000720187005a
0187005a0400009904000099023900b0023900b0023900b002aa00190000
00460000003b000000310000005600000044000000560000004a00000049
04e30030047300500473005c0312003f045000480446003d047300310450
003d047d00620427003f0473005604790054047300550319003b0473003c
047300560473003204730055047e0062042f004b04730053047b005505c5
006a05d3006305f800a6094a00a605f8009c0302003b054100a406390060
0472004601c7008903f80087020a00890473004e0250000e047800850473
005c0473005c0302003b020a008901c70088047100000489009804c3005c
04e70098046f009804080098052f005c04f0009801ea0098037300290489
009803bc009805c7009804ec00980531005c046d00980531005c04db0098
046d004a0410002904dd0091046800080659001e046f0008046c0008040e
001f0691000006aa005c03bc003805310031046f009804e7001404c30090
04710000047100000471000004710000047100000471000004c3005c046f
0098046f0098046f0098046f009801eafff401ea008e01eaffb601eaffda
04ec00980531005c0531005c0531005c0531005c0531005c04dd009104dd
009104dd009104dd0091046c000804710000047100000471000004c3005c
04c3005c04c3005c04c3005c04e7009804e70014046f0098046f0098046f
0098046f0098046f0098052f005c052f005c052f005c052f005c04f00098
04f2002e01eaff9601eaffbd01eaffd401ea003e01ea0087054300980373
00290489009803bc009803bc009803bc009803bc009804ec009804ec0098
04ec009804f500980531005c0531005c0531005c04db009804db009804db
0098046d004a046d004a046d004a046d004a046d004a0410002904100029
04100029040e002904dd009104dd009104dd009104dd009104dd009104dd
00910659001e0659001e0659001e0659001e046c0008046c0008046c0008
040e001f040e001f040e001f047100000691000005310031047100000489
009803ae009804710000046f0098040e001f04f000980531005c01ea0098
04890098045a000205c7009804ec0098042f004c0531005c04e60098046d
00980425006a04100029046c00080546004c046f00080543004c05310052
04710000046f009804f0009801ea008e0531005c046c00080531005201ea
ffda046c0008046f009805af002903ae009804c7005c046d004a01ea0098
01eaffda0373002906f4000f06b6009805da0029041600980463002304e6
009804710000048600980489009803ae00980469000f046f009806540023
041f004604e5009804e50098041600980469000f05c7009804f000980531
005c04e60098046d009804c3005c0410002904630023050d004c046f0008
04dc0098047d004c06280098061e0098057c003c05e700980455009804c6
004606af009804db00120323009802aa002202aa006b02aa001902aa0021
02aa001702aa002202aa002e02aa004902aa002a02aa003302aa002e02aa
003302aa002205c5006a05c5006a05c5006a05c5006a05c5006a05c5006a
05c5006a05c5006a05c5006a05c5006a05c5006a05d3006305d3006305d3
006305d3006305d3006305d3006305d3006305d3006305d3006305d30063
05d3006305f800a605f800a605f800a605f800a605f8009c05f8009c05f8
009c05f8009c05f8009c05f8009c05f8009c05f8009c05f8009c0302003b
0302003b0302003b0302003b030200320302003b0302003b0302003b0302
003b0416ffac0302003b0302003b0302003b020a0089020a004e02690089
02a50089020a00070302003b0302003b0302003b0302003b030200320302
003b0302003b0302003b054100a404720046047200460472004604720046
047200460472004604720046047200460472004601c7ffa703f80087020a
0089020a004e0269008902a50089020a00070250000e0250000e0300000e
0250000e0478008504780085047800850478008504a0005702aa001702aa
002202aa004902aa002a04ee001504ed009d04ed009d060b001a04d50085
05e3008502260099022600890226002c0226001e02260063022600300226
001b0226001d0226001d022600290226001e022600260226001d02260008
022600280c9600460e0c00460000ffba0ed200460000ff5b0000ff910000
ffb70000ff9b0481003604350036043dffba043dffba0481003604350036
043dffba043dffba0692003e0692003e043fffba043fffba03e9004a03e9
004a0481003604350036043dffba043dffba01a8ffc301d6ff5f01a8ffe9
01d6ff85051b003204b5002401f4ffba01f4ffba051b003204b5002401f4
ffba01f4ffba051b003204b5002401f4ffba01f4ffba0375003203750032
0375003203750032067f0045067f0045067f0045067f0045048100360435
0036043dffba043dffba0692003e0692003e043fffba043fffba0692003e
0692003e043fffba043fffba04cf002d04cf002d0327ffba0327ffba04b4
ffe00500ffe00496ffe804e4ffe8075c003205da0032070e003205130039
0bb700000000fe2c0000fffc0000006b000000730000006b051b003204b5
002401f4ffba01f4ffba067f0014077600140327ffba041effba067f0014
077600140327ffba041effba051b003204b5002401f4ffba01f4ffba051b
003204b5002401f4ffba01f4ffba051b003204b5002401f4ffba01f4ffba
0000fff5049e00a403cd000a04e3003003aa002605c000a104ac00870556
00960473005a0a6600440473007e0556001d07ae001206150018064e009e
05be008707a9000906da001f0556009604000086088c000d07130018090e
00a406ce008805c700a40455008805a300a2046f00870239001302390013
04740048062200bf032f000e04ba005c0474004905590014049b000a06aa
00980556fffd05dc00a50590004b02aaffe50473004403eb004c0146ffce
029200000556005c04e3002902390069063c00aa0b56ffc2084aff120b0c
00320ed2004401a8ffba01a8ffba01a8ffba01d6000201a8003201a80046
01a8ffba01a8001a0251003a01a8002901a8004601a8ffba01a8004801a8
ffba01a8002901a8ffba01a8004601a8ffba01a8006e01a8ffba01f4009e
01f4001001f4001b01f4001001f4fff9022e008d01f4006b0199004602bf
003202bf00320473000f02ea001302ea00130427fff70427fff7051b0032
051b0032051b0032051b0032051b0032051b0032051b0032051b00320480
00240480002403e5ffba048000240480002403e5ffba05b5003a05b5003a
01f4ffba01f4ffba0481003604350036043dffba043dffba04a7ffba04a7
ffba04a7ffba04a7ffba064f0027064f00270224ffba021affba04a70046
04a700460224ffba021affba040d0047040d004701a8ffba01a8ffba02b4
002302b400230327ffba0327ffba051b003204b5002401f4ffba01f4ffba
051b003204b5002401f4ffba01f4ffba03b7004a03b7004a037500320375
0032036b0046036b00460000ff1e0000ff480000ff1e0000fee70000ff4f
0000fef90000ffb50000ff520000ff470000ffb50000ff520000ff470000
ff000000fea60000ff000000ff230000ff240000ff570000ff570000ff92
0000ff920000ff920000ff920000ff2f0000fed70000ff340000ff31045a
005304ce004a0000ffac033100190411002d04d10096052400280000ffac
0000ff2a028d00ab028d00a00444003c043d003c0444003c043d003c0444
003c043d003c0445003c0444003c043d003c04a70046028d00ab03270022
02300014017a002e00>
<000000000000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c000000b2000000b2000000b2000000b2000000b20000
00b2000000b2000000b2000000b2000000b2000000b2000000b2000000b2
000000b200000170000001f2000001f2000001f2000001f2000001f20000
049800000498000005fc0000078c0000078c0000078c0000078c0000078c
0000078c0000078c0000078c0000083400000baa00000db800000db80000
0db800000db800001078000014200000154000001540000015400000187a
0000187a00001af000001af000001af000001af000001af000001af00000
1af000001af000001e74000020ba0000234200002586000027ac0000292a
00002b9200002d7e00002f9600002f96000032bc00003444000037ea0000
39f600003c2c00003e380000402a0000414e000045c4000047480000492e
00004bae000051e8000051e8000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000054ec0000
54ec000054ec000054ec000054ec000054ec000054ec000054ec000054ec
000054ec000054ec000054ec000054ec000054ec000054ec000100001004
02b5003c00ca000700020010002f0059000004bf0be7000500020000000e
00ae0000000300000000021a000000000003000000070064021a00010000
00000000010d027e0001000000000003000e038b0001000000000004000e
03990001000000000006000e03a70001000000000007003103b500030000
04090001001c03e60003000004090002000e04020003000004090003001c
04100003000004090004001c042c0003000004090006001c044800030001
04090000021a046400030001040900070062067e00a90020003200300031
003300200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e0020000d000d0048006500620072006500770020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200063006f00700079007200690067006800740020
00a9002000320030003000330020002600200032003000300037002c0020
00520061006c00700068002000480061006e0063006f0063006b00200026
0020004a006f0068006e00200048007500640073006f006e002e00200054
0068006900730020006c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
0048006500620072006500770020006900730020006f00700065006e0020
0073006f007500720063006500200073006f006600740077006100720065
00200075006e00640065007200200074006800650020004d004900540020
004c006900630065006e00730065003b002000730065006500200065006d
0062006500640064006500640020006c006900630065006e007300650020
006400650073006300720069007000740069006f006e00200066006f0072
002000640065007400610069006c0073002e0041007200690061006c0020
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002ea920
3230313320546865204d6f6e6f7479706520436f72706f726174696f6e2e
20416c6c205269676874732052657365727665642e200d0d486562726577
204f70656e54797065204c61796f7574206c6f67696320636f7079726967
687420a92032303033202620323030372c2052616c70682048616e636f63
6b2026204a6f686e20487564736f6e2e2054686973206c61796f7574206c
6f67696320666f72204269626c6963616c20486562726577206973206f70
656e20736f7572636520736f66747761726520756e64657220746865204d
4954204c6963656e73653b2073656520656d626564646564206c6963656e
7365206465736372697074696f6e20666f722064657461696c732e4b4d50
4f45452b417269616c4d544b4d504f45452b417269616c4d544b4d504f45
452b417269616c4d54417269616c20697320612074726164656d61726b20
6f6620546865204d6f6e6f7479706520436f72706f726174696f6e2e004b
004d0050004f00450045002b0041007200690061006c004d005400520065
00670075006c00610072004b004d0050004f00450045002b004100720069
0061006c004d0054004b004d0050004f00450045002b0041007200690061
006c004d0054004b004d0050004f00450045002b0041007200690061006c
004d005400a90020003200300031003300200054006800650020004d006f
006e006f007400790070006500200043006f00720070006f007200610074
0069006f006e002e00200041006c006c0020005200690067006800740073
002000520065007300650072007600650064002e0020000d000d00480065
00620072006500770020004f00700065006e00540079007000650020004c
00610079006f007500740020006c006f00670069006300200063006f0070
007900720069006700680074002000a90020003200300030003300200026
00200032003000300037002c002000520061006c00700068002000480061
006e0063006f0063006b002000260020004a006f0068006e002000480075
00640073006f006e002e002000540068006900730020006c00610079006f
007500740020006c006f00670069006300200066006f0072002000420069
0062006c006900630061006c002000480065006200720065007700200069
00730020006f00700065006e00200073006f007500720063006500200073
006f00660074007700610072006500200075006e00640065007200200074
006800650020004d004900540020004c006900630065006e00730065003b
002000730065006500200065006d0062006500640064006500640020006c
006900630065006e00730065002000640065007300630072006900700074
0069006f006e00200066006f0072002000640065007400610069006c0073
002e0041007200690061006c002000690073002000610020007400720061
00640065006d00610072006b0020006f006600200054006800650020004d
006f006e006f007400790070006500200043006f00720070006f00720061
00740069006f006e002e0000410c0054032c032c032c0222001d001f032b
032a003c001f032ab2061d1fb80328b326181fd0bc032900e00329000203
29b22b1d1fb90327031db23b1f40b80323b31215320f412d03200001002f
0320000100200320006f032000af032000bf03200004005f031e00010010
031e007f031e0080031e00af031e00bf031e00d0031e00060000031e0010
031e0020031e006f031e009f031e00e0031e0006031d031cb2201f104127
0319007f03190002000f031700ef031700ff03170003001f0317002f0317
004f0317005f0317008f0317009f03170006000f0317005f0317006f0317
007f031700bf031700f00317000600400317b2923340b80317b28b3340b8
0317b36a6c3240b80317b2613340b80317b35c5d3240b80317b357593240
b80317b34d513240b80317b344493240b80317b23a3340b80317b3313432
40b80317b32e423240b80317b3272c3240b80317b312253280b80317b30a
0d32c04116031600d00316000200700316000102c4000f0101001f00a003
1500b0031500020306000f0101001f00400312b32426329fbf0304000103
0203010064001fffc00301b20d1132410a02ff02ef0012001f02ee02ed00
64001fffc002edb30e11329f414a02e200af02e200bf02e2000302e202e2
02e102e1007f02e00001001002e0003f02e0009f02e000bf02e000cf02e0
00ef02e0000602e002e002df02df02de02de000f02dd002f02dd003f02dd
005f02dd009f02dd00bf02dd00ef02dd000702dd02dd001002dc00010000
02dc0001001002dc003f02dc000202dc02dc001002db000102db02db000f
02da000102da02daffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3
b21f2532b9ffc002d3b2171b32b9ffc002d3b2121632b802d2b2f9291fb9
0326031cb23b1f40bb0322003e00330322b225311fb80318b23c691fb802
e3b3202b1fa0413002d400b002d40002000002d4001002d4002002d40050
02d4006002d4007002d40006006002d6007002d6008002d6009002d600a0
02d600b002d60006000002d6001002d6002002ca002002cc002002d60030
02d6004002d6005002d6000802d0b2202b1fb802cfb226421f411602ce02
c70017001f02cd02c80017001f02cc02c60017001f02cb02c50017001f02
c902c5001e001f02ca02c6b21e1f00410b02c6000002c7001002c6001002
c7002f02c5000502c1b324121fff411102bf0001001f02bf002f02bf003f
02bf004f02bf005f02bf008f02bf000602bf0222b2641f12410b02bb00ca
0800001f02b200e90800001f02a600a20800406a1f402643493240204349
3240263a3d3240203a3d329f209f26024026969932402096993240268e92
3240208e92324026848c324020848c3240267a813240207a813240266c76
3240206c76324026646a324020646a3240265a5f3240205a5f3240264f54
3240204f5432b8029eb724271f374f6b0120410f02770030027700400277
00500277000402770277027700f90400001f029bb22a2a1fb8029a402b29
2a1f80ba0180bc0180520180a201806501807e01808101803c01805e0180
2b01801c01801e0180400180bb0138000100800140b40180400180bb0138
00010080013940180180ca0180ad01807301802601802501802401802001
3740b80221b2493340b80221b2453340b80221b341423240b80221b33d3e
320f410f0221003f0221007f0221000300bf022100cf022100ff02210003
00400221b320223240b80221b3191e3240b80222b32a3f3240b80221b32e
3a326f414a02c3007f02c3008f02c300df02c30004002f02c3006002c300
cf02c30003000f02c3003f02c3005f02c300c002c300ef02c300ff02c300
0600df02220001008f02220001000f0222002f0222003f0222005f022200
7f022200ef0222000600bf022100ef02210002006f0221007f022100af02
210003000f0221002f0221003f0221004f0221000402c302c30222022202
210221401d101c102b1048038f1c010f1e014f1eff1e0237001616000000
12110811b8010db6f70df8f70d00094109028e028f001d001f0290028f00
1d001f028fb2f91d1fb80198b226bb1f41150197001e0401001f01390026
0125001f013800730401001f0135001c0801001f0134001c02ab001f0132
b21c561fb8010fb2262c1fba010e001e0401b61ff91ce41fe91cb80201b6
1fe81cbb1fd720b80401b21fd51cb802abb61fd41c891fc92fb80801b21f
bc26b80101b21fba20b80201b61fb91c381fadcab80401b21f8126b8019a
b21f7e26b8019ab61f7d1c471f6b1cb80401b21f6526b8019ab21f5e73b8
0401400f1f52265a1f481c891f441c621f4073b80801b61f3f1c5e1f3c26
b8019ab21f351cb80401b61f301cbb1f2b1cb80401b61f2a1c561f291cb8
0101b21f231eb80401b21f5537b80168402c07960758074f07360732072c
0721071f071d071b071408120810080e080c080a08080806080408020800
0814b8ffe0402b0000010014061000000100060400000100041000000100
1002000001000200000001000002010802004a00b013034b024b5342014b
b0c063004b6220b0f65323b8010a515ab005234201b0124b004b5442b038
2b4bb807ff52b0372b4bb007505b58b101018e59b0382bb00288b8010054
58b801ffb101018e851bb0124358b900010111858d1bb900010128858d59
59001816763f183f123e113946443e113946443e113946443e113946443e
11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b
2b2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb0935320
5c58b901f201f04544b901f101f045445958b9033e01f2455258b901f203
3e4459594bb8015653205c58b9002001f14544b9002601f145445958b908
1e0020455258b90020081e4459594bb8019a53205c58b9002501f24544b9
002401f245445958b909090025455258b9002509094459594bb804015320
5c58b173244544b1242445445958b917200073455258b900731720445959
4bb8040153205c58b1ca254544b1252545445958b9168000ca455258b900
ca16804459594bb03e53205c58b11c1c4544b11e1c45445958b9011a001c
455258b9001c011a4459594bb05653205c58b11c1c4544b12f1c45445958
b90189001c455258b9001c01894459594bb8030153205c58b11c1c4544b1
1c1c45445958b90de0001c455258b9001c0de04459592b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b65422b2b01b33b59635c456523456023456560234560b08b766818
b080622020b163594565234520b003266062636820b003266165b0592365
44b063234420b13b5c4565234520b003266062636820b003266165b05c23
6544b03b2344b1005c455458b15c406544b23b403b4523614459b3475034
37456523456023456560234560b089766818b080622020b1345045652345
20b003266062636820b003266165b050236544b034234420b14737456523
4520b003266062636820b003266165b037236544b0472344b10037455458
b137406544b24740474523614459004b5342014b5058b108004259435c58
b108004259b3020b0a124358601b2159421610703eb0124358b93b21187e
1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba04
000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400
000b2b59b0102342b0112342002b74757375001845694445694445694473
73737374757374752b2b2b2b74752b2b2b2b2b7373737373737373737373
73737373737373737373737373732b2b2b45b0406144737400004bb02a53
4bb03f515a58b1070745b040604459004bb03a534bb03f515a58b10b0b45
b8ffc0604459004bb02e534bb03a515a58b1030345b040604459004bb02e
534bb03c515a58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b752b2b2b2b2b2b2b435c58b9008002bbb301401e0174007359
03b01e4b5402b0124b545ab012435c5a58ba009f02220001007359002b74
73012b01732b2b2b2b2b2b2b2b737373732b2b2b2b2b002b2b2b2b2b2b00
456944734569447345694473747545694473456944456944456944737445
6944456944732b2b2b2b2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b
2b2b2b737475732b7374757374752b2b2b742b002b2b2b00184569442b00
00>
[15929 5813 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 1532 39 <0002009e0000055a05ba000f001d012d4012201f0143081c1d1e02010211
101e0f0008174110fffe000c000c014000560017fff2000b000b01400056
0017fff6000c000d0140401f5617262009011f400d0d0255092010100255
090a0f0f025509180d0d025509b8fff4400c0c0c0655091a1f1d100e0b0b
b80140b456100a0d0db80140b456100c0c0cb80140400e56102001200001
00201010025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffab40c
0c025500b8fff7b40c0c065500b8fff8400a0d0d0655005d1e3b5c182b10
f62b2b2b2b2b2b5d3cfd2b2b2b3c10f62b2b2b2b2b5ded2b2b2b003f3cfd
3c3f3cfd3c313043794036031b0708060805080408040619181a1802060b
0a0c0a0d0a030615161416131603061b03172101120e17210118081c2101
160a1121002b2b012b2b2a2a2a2a81015d3311213217161716121514020e
022325213236373636353426272623219e01f9ab5a7e5974734e7a91cd85
feb1013991a531454d976c4eadfecc05ba151d4c62fecfc4a7fefea96132
ad363145e9a6e6f72a1e>CUFAAA+ArialMT AddT42Char 
2 6896 68 <0002004affe8041c043e0028003702de402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe0404f0c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030ebbfffa
000b000b0140b7560e0c0f0f02550eb8ffeab4101002550eb8fff4401410
1006550e0c0d0d06550e060f0f06550e260d0db80140b4560e180c0cb801
40b5560e0e1c0317b802aab3182c0b0bb80140400e56182c0a0a42551895
141c1c0700b8fff440110c0c06550045270a321c030b29611061004110ff
f6000b000b014000560000fff8000c000c014000560000fffc000d000d01
40400b5600060d0d025500252124b8ffecb41010025524b8ffec400b0d0d
025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b065524b8ffdc
400b1010065524060f0f065524b8fffcb40c0c065524b8025b400e274000
26102620263026af260539b8ffc0b40e0e025526b8ffd6b40e0e025526bb
fff4000d000d0140b356263139b8ffc0400d1e23343039c03902a0390139
17b8fff4b71010065517080c0cb80140400956172518222f080d0db80140
b4562f0c0c0cb80140b4562f0e0b0bb801404011562f24bf06cf06021f06
3f060206140b0bb80140b45606140d0db80140b45606080c0cb80140402e
56060e0f0f0255060c0d0d025506180c0c0255060c0b0b0255060c0b0b06
55060e0d0d065506100c0c065506313810f62b2b2b2b2b2b2b2b2b2b5d71
ed2b2b2bf4ed2b2b105d712bf62b2b2b5dedf42b2b2b2b2b2b2b2b3cfd2b
2b2b2be5e5003fed3fe42b3fedfd2b2be41112392f2b2b2b2b2b2b2b2b5d
71ed711112391112393901111217393130005d2b2b2b2b01715d2b2b0071
250606232226353436363736373637363534272623220607273e02333216
161716151514161723260306070e02151416333236373635033c64b96aaf
bc477348356bda67013345887f791db0186ed08988aa5010091722bc1c17
62c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e2d3d59
7118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f3d7700
>CUFAAA+ArialMT AddT42Char 
3 1932 87 <00010024fff2022a0599001701394120000cfffe000c000c01400056000b
fffe000c000c014000560008fffe000c000c014000560007fffe000c000c
014000560006fffe000c000c01400056000affc0b323263409b8ffc04024
23263480190100010c0d0a0103001610092b0f0a06161c030b0f10220022
010d12080d0db80140b456120e0b0bb80140b456120a0c0cb80140402256
12250c01ff070845094560077007800790070400072007a007b007c007d0
070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e0e025507
b8fff8b40d0d025507b8fff8b40c0c025507b8fffab41010065507b8fff0
400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00180136b1
66182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd2b2b2b3c10e4f43c
003fed3f3cfd3c1139123911333310c93130015d2b2b2b2b2b2b2b251706
23222626351123353311371133152311141616333202101a4c3c626c2c84
84b3b5b5132b281ea19f103e65a202638c01076cfe8d8cfd934d2c1a>CUFAAA+ArialMT AddT42Char 

2 0 3 <> CUFAAA+ArialMT AddT42Char 
2 8378 70 <00010050ffe803ed043e001a022fbc0017fff0000c000c0140b4560a080c
0cb80140b45609080c0cb80140b4560f080c0cb80140b45610080c0cb801
40b45611080c0cb901400056b1020243545840340e7f0f010f0b01400050
007000030004121c0b07181c040b010e1507080e0e0255070c0d0d025507
0c0c0c025507100b0b0255072f2b2b2b2bcdd4c6003fed3fed10c45d3210
c45d3231301b4047090c011f1c4313431753135317601360179b029b039a
0da410a41a0c080d190a6a0269036a05750c700d800da60cb509b60ab50c
0c160c860ce302030e225f0f6f0f7f0f030f01b802aa4026300040005000
600070009000a000e000f00009000f0f0b000004121c0b07181c040b1c0f
010f410afff4000c000c01400056000ffff2000b000b0140400f560f240e
080d0d06550e221b000100410afff4000c000c014000560000ffee000b00
0b0140400f5600240b2b1f010100010101400e2bb80140b45601400d0db8
0140b45601400c0cb80140b45601360b0bb8014040205601400b0b065501
401010065501480c0c0655011a0d0d065501491c15080d0db80140b45615
0c0c0cb80140b456150e0b0bb801404021561524cf07011f073f0702070e
0b0b0655070a1010065507120c0c0655070c0d0db80140b456070c0c0cb8
0140b65607311b34c4182b10f62b2b2b2b2b5d71ed2b2b2b10f62b2b2b2b
2b2b2b2b5d724b53234b515a58b90001ffc03859ed2b2b72f42bed2b2b72
003fed3fed12392f11392f105de4105de43130005d71015d7159012b2b2b
2b2b2b011706062322001134123633321617072626232206151416333236
033cb11defaedafef772e989addc1faf197f5a88aaa4846a8e018517b7cf
011d010aac010281afa11b6b6cc3d3d6c282>CUFAAA+ArialMT AddT42Char 
2 12988 79 <000100830000013705ba00030170b3020a0b0bb80140b456030a0b0b410d
014000560001fffc000b000b014000560000fffc000b000b0140b456020b
0c0cb80140b456030b0c0c410d014000560001fffd000c000c0140005600
00fffd000c000c0140b45602040d0db80140b45603040d0d410d01400056
0001fffc000d000d014000560000fffc000d000d0140b75605360b0b0255
05b8ffc0b337383405b8ffc0b334353405b8ffc0b330313405b8ffc0b322
253405b8ffc040251517340f051f059f05df05044f05df05f005031f0570
058005ff05040100000a0203250100b8ffc0b337383400b8ffc040153335
349f0001c000f0000200002000d000e0000400b8fff8b41010025500b8ff
fa401d0e0e025500040c0c0255000a0b0b025500140b0b06550008101006
5500b8fffeb40d0d065500b8ffffb40c0c065500b8fffc400a0c0c065500
4e044750182b10f62b2b2b2b2b2b2b2b2b5d71722b2b3cfd3c003f3f3130
015d71722b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b3311331183b405ba
fa46>CUFAAA+ArialMT AddT42Char 
3 2320 88 <00010083ffe803e0042600180196b9001affc0400915173402201316340f
b8fff040191214342b1301240813160c0113160b06000a111c030b003316
4110fff8000d000d014000560016fff2000b000b014000560016fff4000c
000c0140401c5616251817403336341a401010025517281010025517120e
0e025517b8ffec400b0d0d025517040c0c025517b8fff4400b0b0b065517
141010065517b8fff8400b0d0d0655170c0f0f065517b8fff6400d0c0c06
55ff1701c01701174e1ab8ffc04016343634b01af01a02701aa01ab01aff
1a041a0c080d0db80140b4560c0e0b0bb80140b4560c0c0c0cb80140b356
0c2509b8ffc04010333634f0090100092009d009e0090409b8fff8b41010
025509b8fff840110e0e025509040c0c0255090a0b0b065509b8fff64016
0f0f065509020c0c065509020d0d0655094e194750182b10f62b2b2b2b2b
2b2b5d712bed2b2b2b105d712bf65d712b2b2b2b2b2b2b2b2b2b2b3cfd2b
2b2be4003fed3f3f3c39390111123931304379401a04100e0d0f0d020607
0806080508030610040c1b000d08111b00002b012b2a2a81005d012b2b2b
21350623222626272635113311141716163332363635113311033f7cd55e
a34f100bb40b116e51518e3bb49cb4486d4f35730292fdb38d314751538f
880239fbda00>CUFAAA+ArialMT AddT42Char 
3 790 86 <0001003fffe803b1043e003003e6b3170e0b0bb80140b456180e0b0bb801
40b456190e0b0b4137014000560028fff4000c000c014000560027fff400
0c000c014000560026fff4000c000c014000560025fff4000c000c014000
560024fff4000c000c014000560023fff4000c000c014000560022fff400
0c000c014000560021fff4000c000c014000560020fff4000c000c014040
7c56042214223a094a094424562265227c098e098424a613ab2cc2030d09
171a1817304b2cd617051b025502021032010a185c085c095c0a5c0b5c0c
5c0d6a086a096a0a6a0b6a0c6a0db426b4270f27262427242936245a0a59
0b64266428742374248024930a9c0c9228972c9530a40aa90ca327a428b3
26c5261628b8fff4b40d0d065522b8fff4b40d0d065523b8fff4b40d0d06
5524b8fff4b40d0d065528b8fff4b40c0c065522b8fff4b40c0c065523b8
fff4b40c0c065524b8fff4b40c0c06551db8ffde40121e395a0827250c0a
041a202615040b2e1d1ab802aa4022192c0b0b02551f193f194f195f19af
19cf19060f191f196f19df19041f198f190219bd02550015000002aa0001
ffc040140b0b025510014001021001d00102000110010201b8ffc0b31416
3401b8ffc040100e113401012e5c1d6c1d021d1c150704b8fff4b40b0b02
5504b8ffe6b41010065504b8ffe640130f0f0655041c2e0b1f1a011a2419
4013183432b8ffc040320f0f025519180f0f025519180d0d025519160c0c
025519201010065519200f0f065519100c0c065519160d0d065519160c0c
4109014000560019025b0007fff2000b000b0140b35607242ab8ffc0b51c
39d02a012ab8ffe6b40c0c02552ab8ffe8b40f0f02552ab8ffe8b40c0c06
552ab8ffeab40d0d06552abbfff4000c000c0140b3562a1a32b8ffc04021
272a346032c032023f3280320232100101012400180d0d025500100d0d06
550020b8fff4b40d0d025520b8fff4b41010065520b8fff4b70f0f065520
0e0b0bb8014040165620240f100b0b02550f160c0c02550f200d0d02550f
b8fffa40140f0f02550f0e0c0c06550f0c0d0d06550f060c0cb801404011
560f22df00013f004f00020019313437182b4e10f45d714df42b2b2b2b2b
2b2bed2b2b2b2b102b2bed724e105d712bf62b2b2b2b2b712b4ded2bf42b
2b2b2b2b2b2b2b2b2bed72003fed2b2b2b3fed7112392f2b2b5d71722be4
10fd5d71722be41112391112390111121739313043794040272d1e230514
2c261110121013100306220d201b000928071b01052d071b011e14201b00
210e231b0022230d0c08290a1b012827090a062b041b001f101d1b01002b
2b103c103c2b103c103c2b012b2b2b2b2a2b818181002b2b2b2b2b2b2b2b
2b5d71015d72715d002b2b2b2b2b2b2b2b2b012b2b2b1337161633323635
342726272e02353436373636333216161707262623220615141716171617
1e02151406062322263fb20f897b7c78352593c6994f41382a91537dbd5a
11b00c73697c6a16162f1b84bf975669c67dcfd9013d1c6b7265443d2318
253249814e4779281f2b487b6718525c5237231c1d130a2433417c5c5a9f
57ac>CUFAAA+ArialMT AddT42Char 
2 9606 72 <0002004bffe8041e043e0015001d01bb40171f001c150255035d055d0955
0b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d0d06551d
1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c51125c19
521c61126d1a611c78067815f602f618100016010f0d1717501660167016
03161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b41010025501
b8ffc0400e101006551001010195131c040b174110fff0000c000c014000
560017fff2000b000b014000560017fff8000d000d0140b35617400db8ff
dcb40d0d02550db8ffeeb40d0d06550db8ffeab40c0c06550db8ffc04009
272a34b00d010d1a1fb8ffc0b32526341fb8ffc0b71e2334301f011f16bb
fffc000d000d0140b656163310080c0cb80140b456100e0b0bb80140b456
10080d0db8014040135610240740242a341f073f074f0703070c0c0cb801
40b456070c0d0db80140402b5607200b0b025507180c0c0255071c0d0d02
55070e0b0b0655071c0c0c065507160d0d065507191e3437182b4e10f42b
2b2b2b2b2b2b2b5d2b4dfd2b2b2be42b4e10712b2bf6712b2b2b2b4ded2b
2b2b003fedfd5d2b2be43fed12392f5d3cfd713c01111239391239313001
5d005d2b2b2b017172011706062322001110003332001114072116163332
360121262726232206035eba2ceeb9e9feef0114dcd5010e01fce80ab285
638cfdda02510c3856897ca9015617a3b4011f0103010c0128fedefef910
20afba680195864368a6>CUFAAA+ArialMT AddT42Char 
3 498 85 <00010085000002c6043e001100e7403b2f13011004012304340443045304
66047404060911080908090d1311090d000308010b1c06070106000a0928
9008010822201301130222110e0b0bb80140b45611080d0db80140b45611
0c0c0cb80140b45611250100b8ffc04010333634f0000100002000d000e0
000400b8fff8b41010025500b8fff840110e0e025500040c0c025500060b
0b025500b8fffcb41010065500b8fff440160f0f065500060c0c06550008
0d0d0655004e1247c4182b10f62b2b2b2b2b2b2b2b5d712b3cfd2b2b2be4
105df472e4003f3f3fed11393911393901111239390010c9870e7dc43130
005d72015d33113315363633321707262322060706151185a23e693f5b5e
3e42423b5e141e0426a171483aa727473f6072fdd400>CUFAAA+ArialMT AddT42Char 
2 11646 76 <000200880000013c05ba0003000701f2b3020a0b0bb80140b456030a0b0b
b80140b456060a0b0bb80140b456070a0b0b4119014000560001fffc000b
000b014000560000fffc000b000b014000560005fffc000b000b01400056
0004fffc000b000b0140b456020b0c0cb80140b456030b0c0cb80140b456
060b0c0cb80140b456070b0c0c4119014000560001fffd000c000c014000
560000fffd000c000c014000560005fffd000c000c014000560004fffd00
0c000c0140b45602040d0db80140b45603040d0db80140b45606040d0db8
0140b45607040d0d4119014000560001fffc000d000d014000560000fffc
000d000d014000560005fffc000d000d014000560004fffc000d000d0140
40375609360b0b02554f099009a009b009c009df09f0090700091f097009
80099f09b009c009df09e009ff090a1f0901000107040203090603bbffc0
000d000d0140402a56037e0100060506040a0607250500049f04a004b004
c004e00406c004f0040200042004d004e0040404b8fff8b41010025504b8
fffa40170e0e025504040c0c0255040a0b0b025504140b0b065504b8ffea
b41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e08475018
2b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed2b011112393911
1239393130015d72712b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b133533150311331188b4b4b404ebcfcffb150426fbda>CUFAAA+ArialMT AddT42Char 
2 14314 81 <00010087000003e6043e001601c440130503061302a810b810e303e713f0
03f6130604b8fff040220b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0e4110fff8000d000d01400056000efff2
000b000b01400056000efff4000c000c0140401c560e2418401010025518
400b0b02550b28101002550b140e0e02550bb8ffec40110d0d02550b040c
0c02550b220b0b02550bb8fff4400b0b0b06550b14101006550bb8fff940
0b0d0d06550b0a0f0f06550bb8fff640120c0c06550b40333634ff0b01ff
0b010b4e18b8ffc0401a343634b018f018027018a018b018c01804180302
331516080d0db80140b456160e0b0bb80140b456160c0c0cb80140b45616
250100b8fff6b41111025500b8fffab41010025500b8fffa40170e0e0255
00040c0c0255000a0b0b025500040b0b065500b8fffa40110f0f06550002
0c0c065500040d0d065500b8ffc04012333634f0000100002000d000e000
04004e1710f65d712b2b2b2b2b2b2b2b2b2b3cfd2b2b2b3cf43c105d712b
f65d712b2b2b2b2b2b2b2b2b2b2b2b2bed2b2b2b3c103c003f3c3f3fed11
390112393130437940160611090a080a070a0306102611060e1b010f0a12
1b01002b012b2b2a81015d71002b5d713311331536333216161716151123
11342626232206151187a275dd60a150100ab42a6b4873a7042697af4570
4d327dfd7302866e6d4192ccfdbc>CUFAAA+ArialMT AddT42Char 
2 10538 74 <00020042fe5103ea043e001e002a01e740600b0b05142c0b25144c0b4514
06091d191d2c0b26142c23390b36144a0b46145607580b680bfa0af5150e
2e232c273e233e274c27902ca02c07362136293f2c460b46214529542154
29690763216329602c802cda27e821ee23ef271117160615b802b1b4281c
130701b802aa401020003000600070008000c000d0000700b8027d401005
1c1c0f0a45221c0c0a16153325330a4110fff2000b000b01400056000aff
f2000c000c01400056000afff8000d000d01404024560a251818d0170110
17401760178017042c400b0c02552c400d0d025517121010025517b8fff4
40110f0f025517060e0e025517160d0d025517b8ffea400b0b0b06551712
1010065517b8ffeeb40c0c065517b8fffcb40d0d065517410afffa000c00
0c014000560017fffa000d000d0140400c5617740f012500221f0e0b0bb8
0140b4561f080d0db80140b4561f0c0c0cb801404017561f24bf0fcf0fdf
0fff0f041f0f3f0f4f0f030f0c0c0cb80140b4560f100d0db80140402e56
0f200b0b02550f1a0c0c02550f220d0d02550f1c0b0b06550f0c0d0d0655
0f1a0c0c06550f192b2c74213450182b2b4ef42b2b2b2b2b2b2b2b5d714d
ed2b2b2bf4ed10fd2b2b2b2b2b2b2b2b2b2b2b2b5d713c10fd2b2b2be4f6
3c003fede43fedfd5de43fede43f3c3130015d71005d7117171617163332
363736270623220235341236333217353311140606232226131416333236
35342623220666af0b3243747d88180e0176b0dbf06ed18dbc7aa665dba0
beea99a67d7ca8ad7a78a8581a512532645a37b08b013cdd9801018c9880
fc6af8cf78ab032ad1c0bfccc3c6c300>CUFAAA+ArialMT AddT42Char 
2 0 0 <00020100000005000500000300070042b40201e40607b802994013000504
e403000a0704e4010019080605e40203bc023100090199012e00182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>CUFAAA+ArialMT AddT42Char 
CUFAAA+ArialMT /CharStrings get begin
/g39 39 def
/g68 68 def
/g87 87 def
/g3 3 def
/g70 70 def
/g79 79 def
/g88 88 def
/g86 86 def
/g72 72 def
/g85 85 def
/g76 76 def
/g81 81 def
/g74 74 def
end
CUFAAA+ArialMT /Encoding get
dup 32 /g39 put
dup 33 /g68 put
dup 34 /g87 put
dup 35 /g3 put
dup 36 /g70 put
dup 37 /g79 put
dup 38 /g88 put
dup 39 /g86 put
dup 40 /g72 put
dup 41 /g85 put
dup 42 /g76 put
dup 43 /g81 put
dup 44 /g74 put
pop
end
%ADOEndSubsetFont
/XIBTRZ+ArialMT /CUFAAA+ArialMT findfont ct_VMDictPut
/XIBTRZ+ArialMT*1 
[32{/.notdef}rp /g39 /g68 /g87 /g3 /g70 /g79 /g88 
/g86 /g72 /g85 /g76 /g81 /g74 211{/.notdef}rp]
XIBTRZ+ArialMT nf
XIBTRZ+ArialMT*1 [12 0 0 -12 0 0 ]msf
114.9 113.339 mo
( !"!#)
[8.65686 6.66485 3.32886 6.66486 0 ]xsh
101.88 127.739 mo
($%&'"\(\)*+,)
[6.02289 2.63763 6.69489 6.02289 3.30231 6.65753 4.0188 2.63763 6.69489 0 ]xsh
209.76 142.44 mo
301.56 142.44 li
301.56 91.4395 li
209.76 91.4395 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
209.76 142.44 mo
301.56 142.44 li
301.56 91.4395 li
209.76 91.4395 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CUFAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CUFAAA+ArialMT gcheck setglobal} if
2 1176 38 <00010066ffe7057605d3001d00fdb563026a1d0201b8ffe8b40b0b065500
b8ffe8405f0b0b06552000320d63007000741d8000841d90009a05ab03a5
0db903b40dc70dd000e41df31d110e121d111d1d032a0628112a1c201f47
0d56145715561968056b1d7b128b129a03990e9a1ca801a402a811d50e13
0014001a1014101a0402b8ffdeb2283901b8ffc040202839100f0001041b
131e0c031b1e040910260f4a0026200101011a1f17020c0cb80140b45617
0e0b0bb80140b456170a0c0db80140400a561726200801080c0c0db80140
400d56080c0b0b065508191e635c182b4e10f42b2b5d4ded2b2b2b4e10f6
5d4dedf4ed003fed3fed1117393130012b2b5d5d71005d2b2b0172011706
04232224023534122433320417072626232206021514121633323604b4c2
3dfec3e5edfed79baf0143c2dc012c3bbf33c293a9e35c6de686a3e20202
31effbc1016ed2e50155b1e0cb2da092a2feef91bbfee98abc00>CUFAAA+ArialMT AddT42Char 
2 108 16 <0001004101b8026a026d0003002c401970027003024d014d020201230002
1a05700001001904708d182b4e10e45d10e6002f4ded31300071015d1335
211541022901b8b5b500>CUFAAA+ArialMT AddT42Char 
2 7796 69 <00020086ffe8041f05ba0010001d01e7407b01050c0f240535054505053f
1fb01f021f1f221c331c421c701f901f063a133c163c1a4c164c1a5d085d
0d580f5d165e1a6a086c0d680f6e166e1ac01fd90cda17da19e213ec17ec
19e31de01fff1f1920052f0f2f1430053f0f40054c0f50056605da1df504
fa100c10150e040602001b1c0607010a151c0e0b184110fff8000d000d01
4000560018fff4000c000c014000560018fff2000b000b01404022561824
d00b01100b400b600b800b041f400d0d02550b0c0f0f02550b180d0d0255
0bb8fff6b40c0c02550bb8fff0b40b0b06550bb8fff4b40f0f06550bb8ff
e0b40c0c06550bb8fff4400b0d0d06550b740111020d0db80140b4561108
0c0cb80140b656113300120b0bb80140b45600040d0db801404013560004
0c0c025500040d0d06550033030c0c0cb80140b45603080d0db801404019
5603250202c001019001a001b001f001041f013f014f010301b8fffeb410
10025501b8fffc401d0e0e0255010c0d0d025501100c0c025501120b0b02
55010c0b0b065501b8fff8b41010065501b8fffc40160f0f065501180c0c
065501140d0d065501191e4737182b4e10f42b2b2b2b2b2b2b2b2b2b5d71
723c4d10fd2b2bf42b2b2b2be42b2b10fd2b2b2b2b2b2b2b2b5d71ed2b2b
2b003fed3f3fed3f11391112393130005d015d7172007121231133113633
321e0215100023222703141716333236353426232206012da7b472b162af
7140fef2bdbc6b0234559176aca57576ac05bafdf58f4f8fca73feeffed6
9d0196bf558bcdcbd0c6cd00>CUFAAA+ArialMT AddT42Char 
2 9026 71 <00020046ffe803df05ba0011001d01e5407c0a02040d250d340d440d0535
14351c5702540a5214531c6702640565096314601cc01fd405d513dd19e5
13e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f901f072e
02240d2e163a02350d4b02450d4614491c570a560d670de506e716fa01f4
0e100115030e0b100f001b1c0b0711000a151c030b18410afff8000d000d
014000560018fff8000c000c0140b45618330100bbfff2000b000b0140b4
560025110f4110fff8000d000d01400056000ffff4000c000c0140005600
0ffff2000b000b01404024560f251010d011011011401160118011041f40
0b0b02551f400d0d025511121010025511b8fff440110f0f025511060e0e
025511180d0d025511b8fff2400b0b0b0655110e1010065511b8ffeeb40c
0c065511b8fff8b40d0d065511bbfff8000c000c0140b656117412080d0d
b80140b456120c0c0cb80140b456120e0b0bb80140b656122407100c0cb8
0140b45607100d0db80140403b56bf07cf07df07ff07041f073f074f0703
071e0b0b025507180c0c0255071e0d0d0255070c0b0b0655070c0d0d0655
071a0c0c065507191e3450182b4e10f42b2b2b2b2b2b5d712b2b4ded2b2b
2bfd2b2b2b2b2b2b2b2b2b2b2b5d713c10ed2b2b2b10fd2b3ce42b2b003f
ed3f3c3fed3f3c11391112393130005d01715d0071213506232226263534
123633321617113311011416333236353426232206033865c47fd5756ad4
8360962fb3fd20ac7576a5a87b78a1869e8cfba39f01038a5141020efa46
0212cccac1c6daccc400>CUFAAA+ArialMT AddT42Char 
2 10156 73 <000100130000028005d300170136401e1409010f192f193019401970199b
0c9c0da90d081a0d280db019c0190419b8ffc0401f1a1f341d080d030c0f
1c0a0115022b1413040306000a9f140114ff130e0b0bb80140b756134004
170e0b0bb80140b45617080d0db80140b456170c0c0cb80140400b561725
0400030292010100b8ffc0b331383400b8ffc0402b1c1f3490000119400f
0f025519400d0e025500141010025500280f0f025500220e0e0255002c0d
0d025500b8fff2400b0c0c025500140b0b065500b8ffeab41010065500b8
ffe6b40f0f065500b8fffab70c0c065500a31819bc01ba002100f6010a00
182b2bf62b2b2b2b2b2b2b2b2b2b2b5d2b2b3c10f43c103ced2b2b2b10ed
2bed5d003f3f3c3c3cfd3c3fed3911393130437940141011060907060806
02061009121b0011060f1b012b012b2a8181012b715d0072331123353335
343736363332170726232206151533152311b29f9f131a83764c5c1b3832
5244cfcf039a8c716b344657129d0a4660628cfc6600>CUFAAA+ArialMT AddT42Char 
CUFAAA+ArialMT /CharStrings get begin
/g38 38 def
/g16 16 def
/g69 69 def
/g71 71 def
/g73 73 def
end
CUFAAA+ArialMT /Encoding get
dup 45 /g38 put
dup 46 /g16 put
dup 47 /g69 put
dup 48 /g71 put
dup 49 /g73 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XIBTRZ+ArialMT*1 
[32{/.notdef}rp /g39 /g68 /g87 /g3 /g70 /g79 /g88 
/g86 /g72 /g85 /g76 /g81 /g74 /g38 /g16 
/g69 /g71 /g73 206{/.notdef}rp]
XIBTRZ+ArialMT nf
XIBTRZ+ArialMT*1 [12 0 0 -12 0 0 ]msf
226.62 113.339 mo
(-%&'"\(\)*+,.)
[8.66766 2.66766 6.67566 6.00366 3.33966 6.67566 3.99957 2.66766 6.67566 6.67566 0 ]xsh
226.32 127.739 mo
(/!'\(0#1*%"\(\))
[6.66724 6.66724 5.99524 6.66724 6.66725 3.33124 3.33124 2.65924 2.65924 3.33124 6.66724 0 
]xsh
333.6 75.0596 mo
403.44 75.0596 li
403.44 25.5596 li
333.6 25.5596 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
333.6 75.0596 mo
403.44 75.0596 li
403.44 25.5596 li
333.6 25.5596 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CUFAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CUFAAA+ArialMT gcheck setglobal} if
2 4216 54 <0001005cffe704eb05d30030031441110027fff8000d000d014000560026
fff8000d000d014000560025fff8000d000d0140b45618100c0cb80140b4
5619100c0cb80140b4561a100c0c411f01400056000dffe8000b000b0140
0056000cffe8000b000b01400056000bffe8000b000b01400056001cffe8
000b000b01400056001bffe8000b000b0140b45603180b0bb80140b45602
180b0bb80140b45601180b0bb80140402856630363047303740404252735
03391c430349074c1d451f44244627530359075c1d572889130e23b8fff2
b41010025524b8fff2b41010025525b8fff2b41010025526b8fff2b41010
025527b8fff2b41010025523b8fff6b40d10025524b8fff6b40d10025525
b8fff6b40d10025526b8fff6b40d10025527b8fff640460d100255280d26
240224032725360f34234425452f5a20562355256c0b6a0d6b0e66146518
790b7a0d7a0f7d107524732586038a0b890d8a0f8d1085248325920d960f
96151eb10602435458402d2126121b261a09262901260000291a12043231
2600650002000d2d791b891b021b25160d2d1e27250125051605b8fff440
0c0c0c0655051e2d091e1e1603003fed3fed2b1112395d1112391112395d
1112395d01111217392fed2fed2fed2fed1b402d25240e0d0b05211c1d1e
1b08070604030206012524220e0d0b06051e1b2d1a400c0c02558f1a011a
ed16002d01b8ffc040120c0c02551001200150016001700190010601b801
b0400c2d1e20131342551e1e160305b8ffe0400d13134255051e2d091b26
1a4a094110fff4000c000c014000560009fff2000b000b014000560009ff
f8000d000d0140b656092600290129b8ffeab40e0e025529b8fff4400b0c
0c0255291a32210c0c0cb80140b456210e0b0bb80140b45621080d0db801
40b656212612012612b8ffecb40e0e025512b8fff6b40d0d025512b8fff8
400f0c0c02551254200001001931635b182b4e10f45d4de42b2b2bed10ed
2b2b2b4e10f62b2b5d4ded2b2b2bf4ed003fed2b3fed2b10fd5d2be410fd
5d2bf4111217391117391112393901121739593130005d712b2b2b2b2b2b
2b2b2b2b015d712b2b2b2b2b2b2b2b2b2b2b002b2b2b13371e0233323636
353426272624272626353436363332161617072626232206151417160417
161615140606232224265cb70d5fc87d6faa53505c3bfe6c5169677ef294
a3f98605ba0fada9b0a1393801d958807a86fb9dc7fef39901d7106e8d57
42734445672317612b37a3656fc16469cc810e8b8e815b4f33336b283bb5
7675cf7374e9>CUFAAA+ArialMT AddT42Char 
3 5040 92 <00010021fe5103ee0426001a02a3b30f180d0db80140b456140c0d0db801
40b456150c0d0db80140b456160c0d0db80140b4560f040d0dbe01400056
0012fff4000d000d0140b4560e0c0d0db80140b4560d0c0d0db80140b456
0c0c0d0db80140b4560f0c0c0cb80140b4560e0c0c0cb80140b4560d0c0c
0cb80140b4560c0c0c0cbe014000560012fff2000b000b0140b4560c0e0b
0bb901400056b10202435458401d0a140f030b031c190f12060b06134012
0f200b400c200f180f0f02550f192f2b1add1a18cd1a1910dd1a18cd003f
3f3fed12173931301bb30f1c010fb8ffde40731c392814560faf0a03400d
400f020f202830341020283034070c0912160d1812270b270c270d360c36
0d350e99110b2812281348165912591359156912691369157906760d7911
7a147a15850d8a118c128c138914980aa80bbc10bb11ba14ea0ae714f50d
fd10f914ff1c1e1213180e0e4255b106024354584016130b1c1b040f440f
840f030f190b031c190f12060b06003f3f3fed1112395d01111239391b40
370f0f0c101112120a00031914131325120a1412120a0f0c0f110c250b0a
140b0b0a1312120c0c0b06031c190f001c101c022f1cbf1c021cb8023fb5
0f1340124014b80254400b3f124012025f12bf120212b80142b60f012200
451b0ab8025440120f200b4040200c300c4f0c03500cff0c020cb80142b3
2f0f010fb8023fb41b207c66182b1a1910fd71f45d711a18ed1a1910ed18
10f4e41910e45d71ed1a1810ed1910e45d7100183fed3f3c103c103c8705
2e2b087d10c487052e182b0e7d10c400111239870e103c3c08c44bb00e53
4bb018515ab00243b040505a58bb000cffe8000bffe801383859592b3130
01435c58b90014ffdeb637390a2237390eb8ffe8b51539112215392b2b2b
2b595d712b2b00715d2b015d592b2b2b2b2b2b2b2b2b2b2b2b2b2b002b13
27163332363736373637013313161736371333010607060623227f143b2c
3c48171126050bfe6dc2dd2b221f2be3b4fe6c4124307c5634fe67a91028
241b6b0f1d0428fd9975817c76026bfbc8af42595300>CUFAAA+ArialMT AddT42Char 
CUFAAA+ArialMT /CharStrings get begin
/g54 54 def
/g92 92 def
end
CUFAAA+ArialMT /Encoding get
dup 50 /g54 put
dup 51 /g92 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XIBTRZ+ArialMT*1 
[32{/.notdef}rp /g39 /g68 /g87 /g3 /g70 /g79 /g88 
/g86 /g72 /g85 /g76 /g81 /g74 /g38 /g16 
/g69 /g71 /g73 /g54 /g92 204{/.notdef}rp]
XIBTRZ+ArialMT nf
XIBTRZ+ArialMT*1 [12 0 0 -12 0 0 ]msf
347.46 46.6793 mo
(2"!"*'"*$#)
[8.02936 3.30231 6.69727 3.30231 2.68927 6.02527 3.30231 2.69769 6.02527 0 ]xsh
346.8 61.0793 mo
(!+!%3'*')
[6.67566 6.67566 6.67566 2.66766 6.00366 6.00366 2.66766 0 ]xsh
333.12 206.94 mo
405.36 206.94 li
405.36 160.2 li
333.12 160.2 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
333.12 206.94 mo
405.36 206.94 li
405.36 160.2 li
333.12 160.2 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CUFAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CUFAAA+ArialMT gcheck setglobal} if
2 3512 53 <000200a1000005ad05ba0018002202504021120b0e0112361c5a1f66086d
1f0409100d0d065508100d0d065507100d0d065524b8ffc0b40c0c02550d
b8fff4b40c0c02550cb8fff4b40c0c02550bb8fff4b40c0c025512b8ffe2
b3121a3412b8fff0b322273411b8ffe2b31d273410b8ffe2b31d27340fb8
ffe2b31d273412b8ffd8b31d263411b8ffe2b3121a3410b8ffe2b3121a34
0fb8ffe24049121a34250e4a1c4a20530b5c1c6d1c7209780e790f850a88
0f970da90fb80fe80ee70f100e0c0c20110f1411110f110f0c09121b0221
1a160a061211100d0c0518090916171a191e17beffc0000b000b01400056
0017ffc040150b0b065517170021221e0201020018180f0f0e081e4110ff
fe000c000c01400056001efff2000b000b01400056001efff6000c000d01
40b5561e260e9c06b8ffe8b40f0f025506b8fff6b40d0d025506b8ffe040
190c0c025506060d0d0655065d20247024802403242218020c0cb80140b4
56180e0b0bb80140b456180a0c0db80140400e5618200120000100201010
025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c0255
00060b0b065500b8fff7b40c0c065500b8fff8400a0d0d0655005d233ba8
182b4e10f42b2b2b2b2b2b2b5d3c4dfd2b2b2b3c105df62b2b2b2b19e418
ed2b2b2b003f3c103c103c3f3cfd3c12392f2b2bfd3c103c392f12173901
111739870e2e2b057d10c43130015d2b2b2b2b2b2b2b2b2b2b2b2b2b002b
2b2b5d435c58400a08400f390f103a11123a2b2b2b590171435c58b9000e
ffde401a193911221939122219390e401c391022143910221f3910221539
2b2b2b2b2b2b2b5933112132161615140607161716171323032e02272623
231111213236363534262321a1028ac4cc7acad34d28554cfff4c2556e57
2d214be101a185964e97a3fe3005ba4fc8799cd61d25244e75fe71013184
8c380b07fd750333377947688600>CUFAAA+ArialMT AddT42Char 
2 15404 83 <00020087fe690421043e0012001e01aa40740c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e194110fff2000b000b014000560019fff4
000c000c014000560019fff8000d000d0140401c561924d00a01100a400a
600a800a0420400b0b025520400d0d02550ab8ffe6400b0f0f02550a180d
0d02550ab8fffab40c0c02550ab8ffeeb40b0b06550ab8fff4b40f0f0655
0ab8ffe8400f0c0c06550a74011333023312080d0db80140b456120e0b0b
b80140b456120c0c0cb8014040195612250000c001019001a001b001f001
041f013f014f010301b8fffc401d0e0e025501100d0d025501100c0c0255
01100b0b0255010c0b0b065501b8fff6b41010065501b8fffc40160f0f06
55010c0c0c065501120d0d065501191f473718012b4e10f42b2b2b2b2b2b
2b2b2b5d71723c4d10fd2b2b2bf4e410fd2b2b2b2b2b2b2b2b5d71ed2b2b
2b003f3fed3f3fed113912393130005d015d717200711311331536363332
161615140206232226271103141633323635342623220687a43a926888d0
6a75df7b5a8f2e11a67678aba77473b1fe6905bd8a51518cff98a3fefb8b
4c3afdfb03a4cdc4cbd5cbcad700>CUFAAA+ArialMT AddT42Char 
2 14838 82 <00020044ffe80427043e000d001901deb615180d0d065513b8ffe8b40d0d
06550fb8ffe840650d0d065519180d0d065512070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b144110fff2000b000b014000
560014fff4000c000c014000560014fff8000d000d014040105614241b40
0d0d02551b400b0b025507b8ffea40110f0f025507180d0d025507100b0b
025507b8fff0b40b0b065507b8fff0b40d0d065507b8fff0b40f0f065507
b8fff0b40c0c065507b8ffc0400e2425343007010007100720070307bbff
f4000d000d0140b6560731df1b011bb8ffc0400b1e2334301b011b0e080d
0db80140b4560e0c0c0cb80140b4560e0e0b0bb801404041560e24000c0e
0f025500120d0d0255000c0c0c0255001c0b0b0255000e0b0b0655000e0d
0d0655000c1010065500160c0c065500402425341f003f0002000c0d0db8
0140b456000c0c0cb80140b456000c0b0bb80140b65600311a3437182b10
f62b2b2b5d2b2b2b2b2b2b2b2b2bed2b2b2b10712b5df62b5d5d2b2b2b2b
2b2b2b2b2b2bed2b2b2b003fed3fed313001715d0071435c584009530553
096205620904015d59002b2b2b2b13103736333200151406062322001314
1633323635342623220644a489c5db01167beb8bdffeedb9b28786b2b385
87b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca00>CUFAAA+ArialMT AddT42Char 
CUFAAA+ArialMT /CharStrings get begin
/g53 53 def
/g83 83 def
/g82 82 def
end
CUFAAA+ArialMT /Encoding get
dup 52 /g53 put
dup 53 /g83 put
dup 54 /g82 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XIBTRZ+ArialMT*1 
[32{/.notdef}rp /g39 /g68 /g87 /g3 /g70 /g79 /g88 
/g86 /g72 /g85 /g76 /g81 /g74 /g38 /g16 
/g69 /g71 /g73 /g54 /g92 /g53 /g83 /g82 
201{/.notdef}rp]
XIBTRZ+ArialMT nf
XIBTRZ+ArialMT*1 [12 0 0 -12 0 0 ]msf
340.2 179.939 mo
(4\(5&"!"*6+#)
[8.64001 6.64801 6.71759 6.65753 3.31201 6.71759 3.31201 2.69769 6.64801 6.64801 0 ]xsh
350.88 194.339 mo
(&50!"\()
[6.66595 6.66595 6.66595 6.66595 3.32996 0 ]xsh
166.56 116.94 mo
203.28 116.94 li
.75021 .679683 .670222 .90164 cmyk
@
202.32 113.22 mo
209.76 116.94 li
202.32 120.66 li
202.32 113.22 li
ef
301.56 116.94 mo
311.46 116.94 li
311.46 50.2795 li
327.12 50.2795 li
@
326.16 46.5596 mo
333.6 50.2796 li
326.16 53.9996 li
326.16 46.5596 li
ef
322.86 183.54 mo
311.46 183.54 li
311.46 116.94 li
301.56 116.94 li
@
321.96 179.82 mo
333.12 183.54 li
321.96 187.26 li
321.96 179.82 li
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CUFAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CUFAAA+ArialMT gcheck setglobal} if
3 3446 90 <00010006000005b70426001205ecbc0000fff2000b000b0140b4560e0e0b
0bbe01400056000cfff4000c000d0140b456020c0c0db80140b45610040d
0db80140b45605040d0db80140b45606020d0d410d014000560003fffc00
0d000d014000560000ffea000d000d0140b45610060c0cb80140b4560606
0c0c410d014000560009fffa000c000c01400056000efffa000c000c0140
b4560f060c0c410d014000560012fffa000c000c014000560008fffa000c
000c0140b45607060c0cbe01400056000cfff2000b000b0140b456020e0b
0bb80140b45610060b0bb80140b45606040b0b410d014000560009fffc00
0b000b01400056000efff4000b000b0140b4560f0c0b0b410d0140005600
12fff4000b000b014000560008fff4000b000b0140b456070c0b0b410d01
400056000afff4000d000d014000560004fff4000d000d0140b45611220b
0b410d01400056000affe8000b000b014000560004ffe8000b000b0140b4
5611200d0db80140b45611220c0c410e01400056000affde000c000c0140
00560004ffde000c000c01400056b10202435458b90012fff440110d0d02
5507060d0d025500060d0d02550ab8ffd4b40c0d025504b8ffe8400b0c0d
025511200c0d02550ab8ffc0b40e10025504b8ffc0402f0e10025511400e
100255040a110301000c06070601060f0a000a0d0c060c0c02550c110102
040a04110a0c0c025511b8fff8b40d0d0255112f2b2bcdcd10d6cd10d42b
cd003f3f3f3f3f111217393130002b2b2b2b2b2b012b2b2b1b40160f1401
2a04290a024a115b118e110311200d0d06550ab8ffe0b40d0d065504b8ff
e0b40d0d065511b8fff040091f2134101c1d273409b8fff040b71f243404
060c0913061b09191205040004060b090b0e08121000130314071c081b0b
1d0e240025072a082b0e340035073a083b0e4403470640074d084b0b430f
47114a125b0f52126b076408671279067a077408b906ba0fb612f506fb09
280b112800280d270e280f27122f1438003712770886089803970ca701a8
02a80ba60cb500b606ba0ec804d606d909e804e80fe712f406fa091c0b06
0d0d06550c060d0d065510060d0d06550e060d0d06550f060d0d065512b1
0602435458401b0a0e0f0412001108070825070f250e122500000e07030d
010c250db8ffd640370b0b06550d0225012a0b0b0655010d011413060a0b
11260a2b115404520a5c116c117c118a110a110a040300010f0a000a0c06
07060106003f3f3f3f3f111217395d01111239392f2bf42f2bf411121739
10e410e410e41112391112391112391b40140305050206070705090a0a08
0b0c0c0a1011110fb8ff4bb305001220b8ff4940660a0f0e20c311070820
071112122b0507140505070e0a0c0c250d0e140d0d0e08110f0f2b0a0814
0a0a080005020225010014010100000201071204080f110c0e0d0a110a04
03120d0c0c0808070702020106120f0f0e0e000a14f6100d01600d700d80
0d030db801a7400a204f0a016f0a7f0a020ab8025540094f11016f117f11
0211b80255400b1005016005700580050305b801a7b501f613f666182b4e
10f4194df45d5d18fd5d71fd5d711a19fd5d5d18e6003f3c103c103c3f3c
103c103c103c103c1217390111123939123939113939123939874d2e2b87
7dc4872e182b877dc4872e182b877dc4872e182b877dc42b2b2b870e10c4
070e103c070e103c870e10c4870e10c44bb01f53b00243b040505a58b40d
200c2002bcffe00001ffe0000effd0b400300f2012b8ffe0013838383838
383838594bb03453b00243b040505a58b90008ffd0b10730013838594bb0
21534bb033515ab00243b040505a58b90008ffe0b10720013838594bb012
534bb01e515ab00243b040505a58b9000effd0b60f200d200c2008b8ffd0
b2073012b8ffe0b2003802baffe00001ffe0013838383838383838383859
4bb012534bb017515ab00243b040505a58b90011ffe0b30a200420003838
385959313001435c58b9000effd4b61239002c123900b8ffd4b113392b2b
2b592b2b2b2b2b5d71722b2b2b002b2b2b715d015d59002b2b2b2b2b2b2b
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
21013313173637133313173713330123032703014bfebbbaa93f0433a9b9
9f353db6affeb4bba929d70426fd9be411ca026efd98cbcd0266fbda027c
b5fccf00>CUFAAA+ArialMT AddT42Char 
2 498 36 <0002fffd0000055905ba0007000e0263411d0001fff8000c000c01400056
000afffc000c000c014000560009fff8000c000c014000560005fff8000c
000c014000560004fff8000c000c0140b45608080c0cb80140b45606040c
0cb80140b45607080c0cbe014000560005fffa000b000b0140b45608060b
0bbe014000560004fff4000b000b0140b456020c0b0bbe014000560001ff
f4000b000b0140b456060a0b0bb80140b45607160b0bb80140b456000c0b
0bb80140b4560b060c0cb80140b4560a0a0c0cb80140b456050a0c0cb801
40b456090e0c0cb80140b456060a0c0cb80140b456070e0c0cb80140b756
010e0f10025502b8fff2b40f10025502b8fff8b40d0d065502b8fff44059
0c0c0655090c0c0c0655050c0c0c06552f10301067086809601088039010
c905c606c010f0100b0805590156025010680bb010f30cf30df30e09040c
040d040e030b0a090504040c0d0e080607070c09050408060c07010000b8
fff8400f0c0c02550020070c1407070c020303b8fff840150c0c02550320
040c1404040c091e0505081e060306b80270400900080ce94002010202ba
010b0001010b40120c2000650703525004cf04df040390040104b8010140
0b500cc007df0c03900c010cb8010140100f07cf07027f0780070207930f
d6d7182b10f45d7119f45d71f45d7118ed10ed1a1910eded00183f3c1aed
3fe43c10ed3c10ed87052e2b2b7d10c4872e182b2b7d10c4011112393911
39398710c4c40ec4c4870510c4c40ec4c43130014bb00b534bb01e515ab0
0243b040505a58b4040f030807bafff00000fff838383838590172715d2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b230133
012303210313210326270607030233d10258ddabfd9ba1d901f19946221c
3305bafa4601bcfe44025a0196b9778d8b00>CUFAAA+ArialMT AddT42Char 
3 2806 89 <0001001a000003e80426000a024dbc0008fff2000b000b0140b456020e0b
0b410d014000560000ffea000d000d014000560008ffea000d000d0140b4
5602160d0d410d014000560000fff4000c000c014000560008fff0000c00
0c0140b45602100c0cb901400056b1020243545840170508000a08060106
0a0005090805010205240f0f0255052f2bddcd10ddcd113333003f3f3f12
3931301bb7350501002211390ab8ffde400d11390916121c340816121c34
02b8ffeab3121c3401b8ffeab3121c340ab8ffd840091e213400281e2134
0ab8ffe8400922253400162225340ab8ffda407e282e340020282e340f0c
29002809260a3900350a4800470a56015602590858096601660269086909
78007701770279087809770a870187028603890788088a099d009809910a
ac00a20abd00b707b10ac900c50ada00d50aec00e30afb00f40a2c0a0005
0a1800160a2800260a370a4f00400a09054012163405400b0d34b1060243
5458400905010008060106000ab8fff4400f0d0d06550a000c0d0d065500
050908b8fff440120d0d0655080501020c0d0d06550205050c0b1112392f
dd2bcd10dd2bcd10cd2bcd2b002f3f3f11123931301b40370a0708082509
0a1409090a0003020225010014010100050a0a000a09080802020106070a
09030001052f0c010c22084040400980090209b8011bb5400580050205b8
011b400920024001220bead2182b10f6ed1a19fd5dfd5d1a18ede45d1112
3939123939003f3c103c103c3f3c113987052e2b877dc4872e182b877dc4
593130002b2b01715d2b2b2b2b2b2b2b2b2b2b2b2b005d59012b2b2b2b2b
2b2b2b210133131617363713330101aefe6cbee4251f182becb9fe6e0426
fd84676f54760288fbda>CUFAAA+ArialMT AddT42Char 
2 178 30 <000200aafede018304260003000e0085402f730b830b930ba30bf00b0500
0b01260a370a460a560a650ab50ae20a070b0a0e0704033c01073c060605
0e040bab0ab801504023053c040106040a028100000506073c040a380b3a
052f043f040220040104a10fa198182b10f45d713cf4e410fd3c103c10ed
003f3f10fdfded103c103c10ed10ed011112390010c93130017100727113
3533150335331514060727363637b6cdcdcd5057323936030359cdcdfca7
cdcd718b264d19615b00>CUFAAA+ArialMT AddT42Char 
2 2100 48 <000100980000060f05ba0010032fb3082a0b0db80140b456022a0b0db901
400056b10202435458b90008fff6400b0c0c0255080e0d11025502b8ffee
b40d11025505b8ffee40280d1102550c120c0c0255050f0c030900010208
090b0e000809020a0b06101002550b100d0d02550bb8fffab60c0c02550b
1000b8ffe6b41010025500b8fff8b40f0f025500b8fffcb40d0d0255002f
2b2b2bcd2f2b2b2bcd003f3fc0c010d0d0c0111217392b2b3130012b2b2b
001bb10602435458401f07200b0b065506200b0b065503200b0b06550420
0b0b065505200b0b065508b8fff240230b0b0655020c0b0b065503060c0c
0655020e0c0c0655090c0c0c06550a0c0c0c065507b8fff8b40d0d065508
b8fff8401f0d0d06552605010c200a12340f200a12340f050c0300010e0b
00080801020ab8ffeeb40b0b06550ab8ffeeb40c0c06550abb0256001200
100256400d000c0b0b065500060c0c065500b8fff8b40d0d065500012f2b
2b2bf42ff42b2b003f3c3f3c3c111217392b2b5d3130012b2b2b2b2b2b2b
2b002b2b2b2b2b1b407f00020f0814021b0804760c860cc80c03090c490c
490f032904250d2c0e58035b04760d780e870d080b020508390d360e4f02
4b03440740084d0d420e0a9802990396079608a803a7070612020f0e0e30
050214050502080c0d0d300508140505080c520f5201400102020808090a
0b0b0d0d0e0e1000080902601280120212ba02a8000d0131b2052008b801
31b50c090a0a0b0bb80140b4560a0a0c0cb801404009560a20400c7f0b01
0bba0256000e010bb2052002b8010bb20f0100410afff6000b000b014000
560000fff6000c000c0140b75600200f70100110b80256b7200560058005
0305b802a8b3113b59182b1910f45df45d3c18fd2b2b3c10ed1a1910edf4
5d3c1a18fd2b2b3c10ed1a1910ede45d00183f3f3c3c103c103c103c103c
103c103c1a10eded87052e2b877dc4872e182b877dc43130004bb00b534b
b01e515a58bd000cfffb0008ffd60002ffd638383859014bb00c534bb028
515ab00243b040505a58b9000dfff8b10e0a38385901435c58b9000dffd4
b621390e2c21390db8ffd4b637390e3237390db8ffd4b52d390e2c2d392b
2b2b2b2b2b5972715d00715d015d5959002b2b3311210116173637012111
231101230111980124015b30161935015f0105bbfe56affe5805bafbf291
48509b03fcfa4604cbfb3504e0fb2000>CUFAAA+ArialMT AddT42Char 
CUFAAA+ArialMT /CharStrings get begin
/g90 90 def
/g36 36 def
/g89 89 def
/g30 30 def
/g48 48 def
end
CUFAAA+ArialMT /Encoding get
dup 55 /g90 put
dup 56 /g36 put
dup 57 /g89 put
dup 58 /g30 put
dup 59 /g48 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XIBTRZ+ArialMT*1 
[32{/.notdef}rp /g39 /g68 /g87 /g3 /g70 /g79 /g88 
/g86 /g72 /g85 /g76 /g81 /g74 /g38 /g16 
/g69 /g71 /g73 /g54 /g92 /g53 /g83 /g82 
/g90 /g36 /g89 /g30 /g48 196{/.notdef}rp]
XIBTRZ+ArialMT nf
XIBTRZ+ArialMT*1 [10.02 0 0 -10.02 0 0 ]msf
35.58 127.739 mo
(4!7#0!"!)
[7.21044 5.54712 7.21043 2.82164 5.54712 5.54711 2.76156 0 ]xsh
335.4 141.539 mo
(800*"*9\(#*+$\)\(!'\(:)
[6.67639 5.56409 5.56409 2.21741 2.7785 2.21741 5.00299 5.56409 2.7785 2.21741 5.56409 5.00296 
3.32956 5.56409 5.51807 5.04013 5.51804 0 ]xsh
324.3 153.539 mo
(;&%"*5%*$!"*9\(#0\($\)\(!'\()
[8.34155 5.51807 2.21939 2.78052 2.21939 5.51807 2.21939 2.21939 5.00494 5.56607 2.78052 2.21939 
5.00497 5.56607 2.78052 5.56607 5.56607 5.00494 3.33154 5.56607 5.56607 5.00494 0 ]xsh
405.36 183.54 mo
425.22 183.54 li
425.22 214.74 li
187.08 214.74 li
187.08 130.56 li
.75021 .679683 .670222 .90164 cmyk
@
183.36 131.46 mo
187.08 124.02 li
190.8 131.46 li
183.36 131.46 li
ef
421.68 50.2795 mo
483.66 13.0796 li
545.7 50.2795 li
483.66 87.4796 li
421.68 50.2795 li
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
421.68 50.2795 mo
483.66 13.0796 li
545.7 50.2795 li
483.66 87.4796 li
421.68 50.2795 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CUFAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CUFAAA+ArialMT gcheck setglobal} if
2 368 31 <0001007000e2043b04c30006005a400c8f0380050203050603080205bb02
5a00060003025ab2024006ba015000020150401500ab01ab2004021a0804
3c01200001007507575a182b10f65d3ced4e10f600192f1a4dedededed18
1a10ed10ed01111217393130005d133501150101157003cbfcfe03020281
a8019ab3fec4fec1b300>CUFAAA+ArialMT AddT42Char 
2 11154 75 <00010087000003e805ba001401a8b90016ffc0b315173403b8ffe0400e0d
0d0655250435034503ba0d0403b8ffe040151719341708110c1114030501
000f1c0507140b0a0c4110fff8000d000d01400056000cfff2000b000b01
400056000cfff4000c000c01404027560c250940333634ff0901c0090116
400b0b025516401010025509281010025509140e0e025509b8ffec40110d
0d025509040c0c0255091a0b0b025509b8fff6400b0b0b06550914101006
5509b8fff8400b0d0d0655090a0f0f065509b8fff6b60c0c0655094e16b8
ffc04017343634b016f016027016a016b016ff1604160214080d0db80140
b456140c0c0cb80140b456140e0b0bb80140b45614250100b8ffc0401033
3634f0000100002000d000e0000400b8fffab41010025500b8fffa40170e
0e025500040c0c025500080b0b025500040b0b065500b8fffa40160f0f06
5500020c0c065500020d0d0655004e154750182b10f62b2b2b2b2b2b2b2b
5d712b3cfd2b2b2b3c105d712bf42b2b2b2b2b2b2b2b2b2b2b2b5d712bed
2b2b2b003f3c3fed3f1139113901123931304379400e060e07250e060c1b
010d080f1b01002b012b2b81002b5d2b012b331133113633321616151123
11342623220606151187b47ec076ae4bb4756b508d3c05bafdf2925da49c
fd5f02a1877b538e7dfdbb00>CUFAAA+ArialMT AddT42Char 
CUFAAA+ArialMT /CharStrings get begin
/g31 31 def
/g75 75 def
end
CUFAAA+ArialMT /Encoding get
dup 60 /g31 put
dup 61 /g75 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XIBTRZ+ArialMT*1 
[32{/.notdef}rp /g39 /g68 /g87 /g3 /g70 /g79 /g88 
/g86 /g72 /g85 /g76 /g81 /g74 /g38 /g16 
/g69 /g71 /g73 /g54 /g92 /g53 /g83 /g82 
/g90 /g36 /g89 /g30 /g48 /g31 /g75 194{/.notdef}rp]
XIBTRZ+ArialMT nf
XIBTRZ+ArialMT*1 [12 0 0 -12 0 0 ]msf
453.3 39.4792 mo
(-6+1*0\(+$\(#)
[8.66876 6.67676 6.67676 3.34076 2.66876 6.67676 6.67676 6.67676 6.00476 6.67676 0 ]xsh
459.12 53.8793 mo
(*+"\(\)9!%#<#)
[2.67719 6.68518 3.34918 6.68518 3.95984 6 6.68518 2.67719 3.34918 6.96002 0 ]xsh
458.94 68.2793 mo
("=\)\('=6%0)
[3.33966 6.67566 3.99957 6.67566 6.00366 6.67566 6.67566 2.66766 0 ]xsh
403.44 50.2795 mo
415.14 50.2795 li
.75021 .679683 .670222 .90164 cmyk
@
414.24 46.5596 mo
421.68 50.2796 li
414.24 53.9996 li
414.24 46.5596 li
ef
545.7 50.2795 mo
552.78 50.2795 li
552.78 4.25958 li
56.7 4.25958 li
56.7 19.4996 li
@
60.42 18.5396 mo
56.7 25.9796 li
52.98 18.5396 li
60.42 18.5396 li
ef
312.78 11.4595 mo
328.08 11.4595 li
328.08 -2.94049 li
312.78 -2.94049 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CUFAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CUFAAA+ArialMT gcheck setglobal} if
2 2986 49 <0001009c0000051f05ba000901e2b303180c0cbe014000560008ffe8000c
000c0140b256120bb8ffc0400a13153408180c16025503b8ffe8b40c1602
5503b8fff4402311114255080c1111425508020303200708140707080207
0303080904020209070804034110fffb000c000c014000560003fff2000b
000b014000560003fffb000c000c0140b5560320060605b8ffecb40f0f02
5505b8fff2400b0d0d025505120c0c025505b8fff7401a0b0b0655055d20
0b01200b500b600b700b800b050b08090e0b0bb80140b456090a0c0cb801
40b45609200100b8ffc0400d13153420000100201010025500b8fff6b40f
0f025500b8fff6b40d0d025500b8fffa400b0c0c025500040b0b065500b8
fff7b40c0c065500b8fff8400a0d0d0655005d0a3b59182b10f62b2b2b2b
2b2b2b5d2b3cfd2b2b3c105d71f42b2b2b2b3c10fd2b2b2b3c003f3c3f3c
1239390111393987042e2b877dc4b10602435458b90003ffe0b70c113408
200c1134002b2b592b2b31302b2b012b435c58b40840463903b8ffc0b646
390840323903b8ffc0b632390722193902b8ffdeb619390722323902b8ff
deb632390722233902b8ffde400b2339070e1439070e133902b8fff4b613
39070e1d3902b8fff4b61d39070e153902b8fff8b115392b2b2b2b2b2b2b
012b2b2b2b2b2b002b2b2b2b59002b2b331133011133112301119cc70302
bac7fcfe05bafb81047ffa460480fb80>CUFAAA+ArialMT AddT42Char 
CUFAAA+ArialMT /CharStrings get begin
/g49 49 def
end
CUFAAA+ArialMT /Encoding get
dup 62 /g49 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XIBTRZ+ArialMT*1 
[32{/.notdef}rp /g39 /g68 /g87 /g3 /g70 /g79 /g88 
/g86 /g72 /g85 /g76 /g81 /g74 /g38 /g16 
/g69 /g71 /g73 /g54 /g92 /g53 /g83 /g82 
/g90 /g36 /g89 /g30 /g48 /g31 /g75 /g49 
193{/.notdef}rp]
XIBTRZ+ArialMT nf
XIBTRZ+ArialMT*1 [12 0 0 -12 0 0 ]msf
312.72 7.85925 mo
(>6)
[8.69769 0 ]xsh
127.56 170.82 mo
127.56 146.82 li
.75021 .679683 .670222 .90164 cmyk
@
123.84 147.78 mo
127.56 140.34 li
131.28 147.78 li
123.84 147.78 li
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CUFAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CUFAAA+ArialMT gcheck setglobal} if
2 1932 47 <000100960000042a05ba0005008b400c010204031e05000820040104b802
a7b5070203020c0cb80140b456030e0b0bb80140b456030a0c0db8014040
0e5603200120000100201010025500b8fff6b40f0f025500b8fff6b40d0d
025500b8fffab40c0c025500b8fff6b40c0c065500b8fff8400a0d0d0655
005d063b5c182b10f62b2b2b2b2b2b5d3cfd2b2b2b3c10e65d003f3cfd3c
3f313033113311211596c202d205bafaf3ad>CUFAAA+ArialMT AddT42Char 
2 5440 58 <000100190000077605ba001802d6bc000ffffe000c000c0140b45602020c
0c410d01400056000efffa000c000c01400056000ffffd000c000c0140b4
5602030c0c410d01400056000efffa000b000b01400056000ffff4000b00
0b0140b45604060b0bb80140b456030a0b0bb80140b456020e0b0bb80140
b456040c0c0cb80140b456030c0c0cb80140b456020c0c0c411f01400056
000efff4000d000d01400056000fffea000d000d01400056000ffff4000c
000c01400056000cffd4000b000d014000560005ffd4000b000d01404033
562900261129122618390036113912361849004711491247185800571158
125718109808980f02111818184255101818184255b10602435458403310
011a192b153405340c4405440c4b155405540c5b156405640c6b15740574
0c7b150f05150c030001120800080f0208020102003f3f3f3f3f11121739
5d01111239391b401e030405050206070808050a0b0c0c090d0e0f0f0c14
131212151617181815b8ff3cb305001820b8ff3cb30c121120b8ff3c405a
150809200005020220010014010100180508081e151814151518120c0909
1e151214151512110c0f0f2010111410101112090c081815050f11100c00
0205150c050318100f0f0909080802020102181212111100081a17171a10
410901510020000c015100150151004000050151b620200101011919b801
8bb1a8182b4e10f45d1a194dfd1a18fdfd1a19fd184e456544e6003f3c10
3c103c3f3c103c103c103c103c1217390112393911123939111239391139
39874d2e2b877dc4872e182b877dc4872e182b877dc4872e182b877dc42b
2b2b870e10c4c4870e103cc4870e10c4c4870e10c4c4870e10c4c4870e10
c4c4014bb00f534bb011515ab00243b040505a58b2120a18b8fff6383859
014bb025534bb02a515ab00243b040505a58b90000ffc03859004bb00b53
4bb00e515ab00243b040505a58b30c40054038385959012b2b313001725d
002b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b21013313161736370133
131217363713330123012627060701019efe7bc7df241a380a0117ead24f
231c2de6c3fe6ebbfecb27071714fec905bafc3f9795eb2403defd1afeec
f38bb403aefa46045d8c206547fba300>CUFAAA+ArialMT AddT42Char 
2 13380 80 <0001008700000626043e0023033d41920013fff2000b000b014000560010
fff2000b000b014000560012fff2000b000b014000560011fff2000b000b
01400056001dfffc000d000d01400056001cfffc000d000d01400056001b
fffc000d000d01400056001afffc000d000d01400056001dfffc000c000c
01400056001cfffc000c000c01400056001bfffc000c000c01400056001a
fffc000c000c01400056000cfffe000c000c01400056000dfffe000c000c
01400056000efffe000c000c01400056000ffffe000c000c014000560013
fff2000c000c014000560010fff2000c000c014000560012fff2000c000c
014000560011fff2000c000c014000560013fff8000d000d014000560010
fff8000d000d014000560012fff8000d000d014000560011fff8000d000d
01400056000dfff4b40d0d065508b8fff4b40d0d065509b8ffd8404d0b0d
342504e404e409e117e52005d505f620021708202309181b20090303231e
1c06151c0b0b06070106231a19100ad025019025a025022517171a0e2590
110111041010025511180f0f025511b8ffec400b0e0e025511140c0c0255
11b8ffe840170b0b025511020b0b0655110c1010065511060f0f065511b8
fffab40c0c065511b8fff8b40d0d065511b8015db318080c0cb80140b456
180e0b0bb80140b45618040d0db80140400d561825901b011b180f0f0255
1bb8ffec400b0e0e02551b140c0c02551bb8ffee40110b0b02551b040b0b
06551b0a101006551bb8fffe400b0d0d06551b0c0f0f06551bb8fffcb40c
0c06551bb8015db6000233230e0b0bb80140b45623080d0db80140b45623
0c0c0cb80140401456232501d000019000a000021f003f004f000300b8ff
fe401d0e0e025500100d0d025500100c0c0255000c0b0b025500160b0b06
5500b8fffcb41010065500b8fff440140f0f0655000a0c0c0655000e0d0d
065500192425b80178b3214750182b2b4ef42b2b2b2b2b2b2b2b2b5d7172
3c4dfd2b2b2be410f42b2b2b2b2b2b2b2b2b5ded2b2b2bf42b2b2b2b2b2b
2b2b2b2b5dfd4e456544e67172003f3c3c3c3f3f3c4d10ed10ed11173901
111239123931304379400e0c141326140c111b01120d151b01002b012b2b
81015d005d2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b331133153636333216173633321615112311342626232206151123
11342623220606151187a132a66a76971f7eca9eaab3235c3e7094b45864
4c813a0426954e5f6258baafb6fd27029d6c5f3a95a4fd9702b27878509a
91fdd900>CUFAAA+ArialMT AddT42Char 
CUFAAA+ArialMT /CharStrings get begin
/g47 47 def
/g58 58 def
/g80 80 def
end
CUFAAA+ArialMT /Encoding get
dup 63 /g47 put
dup 64 /g58 put
dup 65 /g80 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XIBTRZ+ArialMT*1 
[32{/.notdef}rp /g39 /g68 /g87 /g3 /g70 /g79 /g88 
/g86 /g72 /g85 /g76 /g81 /g74 /g38 /g16 
/g69 /g71 /g73 /g54 /g92 /g53 /g83 /g82 
/g90 /g36 /g89 /g30 /g48 /g31 /g75 /g49 
/g47 /g58 /g80 190{/.notdef}rp]
XIBTRZ+ArialMT nf
XIBTRZ+ArialMT*1 [10.02 0 0 -10.02 0 0 ]msf
79.5 180.539 mo
(?@-#$%&'"\(\)*+,#)
[5.53503 9.48197 7.19836 2.74948 5.04012 2.21848 5.53503 5.04013 2.74947 5.57816 3.30051 2.18835 
5.57816 5.57816 0 ]xsh
92.8196 192.539 mo
(!%,6\)*"=A)
[5.57112 2.22443 5.51807 5.57816 3.33658 2.22444 2.78556 5.57112 0 ]xsh
28.38 66.1796 mo
85.08 66.1796 li
85.08 25.9796 li
28.38 25.9796 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
28.38 66.1796 mo
85.08 66.1796 li
85.08 25.9796 li
28.38 25.9796 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CUFAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CUFAAA+ArialMT gcheck setglobal} if
3 0 84 <00020048fe6903e0043e0010001c0193406c0b022b022a183b024b02790c
063f153f194b19901ea01e053413341b3f1e4413441b5313531b6313631b
601e801ed406d512e606e90cea18102902220c2b153902350c4902460c5a
026902d90cdb18e316e919e61bfc020f01040d141a1c0b070e06141c040b
000e170e33004110fff2000b000b014000560000fff4000c000c01400056
0000fff8000d000d014040245600251010d00f01100f400f600f800f041e
400b0c02551e400d0d02550f12101002550fb8fff440110f0f02550f060e
0e02550f160d0d02550fb8fffe400b0c0c02550f16101006550fb8ffe8b4
0c0c06550fb8fff4400a0d0d06550f7411080d0db80140b456110c0c0cb8
0140b456110e0b0bb801404017561124bf07cf07df07ff07041f073f074f
0703070c0d0db80140b456070c0c0cb8014040285607240b0b0255071a0c
0c025507220d0d025507160c0c0655071a0d0d065507191d1e7421345018
2b2b4ef42b2b2b2b2b2b2b5d714ded2b2b2bfd2b2b2b2b2b2b2b2b2b2b5d
713c10fd2b2b2bf43c003f3fed3f3fed113912393130005d015d71007101
11060623220011343636333217353311011416333236353426232206032c
2a9755bdfeef6fd37ec571a2fd21ac7873a6af7675a3fe6902083b4e012e
0107a0fe83a68efa4303adcdcdc3c7d4d6c7>CUFAAA+ArialMT AddT42Char 
CUFAAA+ArialMT /CharStrings get begin
/g84 84 def
end
CUFAAA+ArialMT /Encoding get
dup 66 /g84 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XIBTRZ+ArialMT*1 
[32{/.notdef}rp /g39 /g68 /g87 /g3 /g70 /g79 /g88 
/g86 /g72 /g85 /g76 /g81 /g74 /g38 /g16 
/g69 /g71 /g73 /g54 /g92 /g53 /g83 /g82 
/g90 /g36 /g89 /g30 /g48 /g31 /g75 /g49 
/g47 /g58 /g80 /g84 189{/.notdef}rp]
XIBTRZ+ArialMT nf
XIBTRZ+ArialMT*1 [12 0 0 -12 0 0 ]msf
34.98 42.4792 mo
(2\(+'*+,#)
[8.00409 6.672 6.672 6 2.664 6.672 6.672 0 ]xsh
38.04 56.8793 mo
(\)\(B&*\)\()
[3.98273 6.65881 6.71759 6.65753 2.65082 3.98273 0 ]xsh
56.7 66.1796 mo
56.7 116.94 li
82.08 116.94 li
.75021 .679683 .670222 .90164 cmyk
@
81.18 113.22 mo
88.62 116.94 li
81.18 120.66 li
81.18 113.22 li
ef
.24 lw
483.66 87.4796 mo
483.66 125.58 li
@
486.42 124.92 mo
483.66 130.44 li
480.9 124.92 li
486.42 124.92 li
ef
473.34 116.16 mo
494.04 116.16 li
494.04 101.76 li
473.34 101.76 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CUFAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CUFAAA+ArialMT gcheck setglobal} if
2 6266 60 <000100060000054605ba000c023bb30b050d0db80140b4560c050d0d410d
014000560001fffb000d000d014000560000fffb000d000d0140b4560b06
0c0cb80140b4560c060c0c410d014000560001fffa000c000c0140005600
00fffa000c000c0140b45604040b0b4113014000560007fffc000b000b01
4000560008fffa000b000b014000560009fff2000b000b0140b456030f0b
0bb80140b4560b070b0bb80140b4560c070b0b410d014000560001fff900
0b000b014000560000fff9000b000b0140b75608093a03043b09b8ffe7b3
12173408b8ffe7400e1217340419121734031912173409b8ffd8b3182134
08b8ffd8403b182134042818213412260429082a0a2f0e0468016806680b
de060405040303060807090606090603090a0c10025509200a0b140a0a0b
0603060903b8fff640160c1002550320020114020201060c0b0601030200
010bb8021940090a0a0903020200080eb8021840090c0952400a800a020a
b801b5400d0b0b0c200003524f028f020202b801b5400901010014101002
5500b8fff6400b0f0f0255000c0d0d025500b8ffe2b40c0c025500b80218
b60d0ec22160a8182b2bf62b2b2b2b3c10f45ded10fd3c10f45ded10e600
3f3f3c3c3c10f43c11121739011239872e2b2b087d10c405872e182b2b08
7d10c4870ec4c487100ec4c44bb017534bb01c515ab00243b040505a58b4
080c090c04bafff40003fff40138383838593130005d015d435c58400909
2219390822193904b8ffdeb119392b2b2b592b2b2b2b2b2b2b2b2b012b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b21110133011617363701330111023b
fdcbec01215045425e011ce2fdb7026d034dfe467c7c739001affcb3fd93
>CUFAAA+ArialMT AddT42Char 
CUFAAA+ArialMT /CharStrings get begin
/g60 60 def
end
CUFAAA+ArialMT /Encoding get
dup 67 /g60 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XIBTRZ+ArialMT*1 
[32{/.notdef}rp /g39 /g68 /g87 /g3 /g70 /g79 /g88 
/g86 /g72 /g85 /g76 /g81 /g74 /g38 /g16 
/g69 /g71 /g73 /g54 /g92 /g53 /g83 /g82 
/g90 /g36 /g89 /g30 /g48 /g31 /g75 /g49 
/g47 /g58 /g80 /g84 /g60 188{/.notdef}rp]
XIBTRZ+ArialMT nf
XIBTRZ+ArialMT*1 [12 0 0 -12 0 0 ]msf
473.28 112.499 mo
(C\(')
[8.01489 6.6828 0 ]xsh
462.42 158.76 mo
504.96 158.76 li
512.76 158.76 519.12 152.4 519.12 144.6 cv
519.12 136.74 512.76 130.44 504.96 130.44 cv
462.42 130.44 li
454.62 130.44 448.26 136.74 448.26 144.6 cv
448.26 152.4 454.62 158.76 462.42 158.76 cv
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
1.2 lw
462.42 158.76 mo
504.96 158.76 li
512.76 158.76 519.12 152.4 519.12 144.6 cv
519.12 136.74 512.76 130.44 504.96 130.44 cv
462.42 130.44 li
454.62 130.44 448.26 136.74 448.26 144.6 cv
448.26 152.4 454.62 158.76 462.42 158.76 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CUFAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CUFAAA+ArialMT gcheck setglobal} if
2 5152 55 <00010030000004ba05ba000700fcb306020c0cb80140b45607020c0cb801
40b45606070b0bb80140b45607070b0b410d014000560001fff9000b000b
014000560000fff9000b000b0140b45606050c0db80140b45607050c0d41
0d014000560001fffb000c000d014000560000fffb000c000d0140400e56
05021e04030200080706050409b80273b320040104b80101b7062001022f
030103b80101b5010120000100b8ffe8400b1010025500080f0f025500b8
fff2b40c0c025500b8ffe2b40d0d025500b8fffcb40c0c065500b8fffeb4
0d0d065500b80273b308b699182b10f62b2b2b2b2b2b5d3c10f45d3c10fd
e45de6103c103c003f3f3cfd3c3130012b2b2b2b2b2b2b2b2b2b21112135
211521110213fe1d048afe1b050dadadfaf3>CUFAAA+ArialMT AddT42Char 
2 12182 78 <00010088000003f805ba000b02efb3030e0b0b4113014000560009fff200
0b000b014000560008fff2000b000b014000560004fff2000b000b0140b4
56070c0c0cb80140b456060c0c0cb80140b456050c0c0cb80140401c5606
0c0d0d0655070656065a09030f0df305f60603090c1010025506b8fff4b4
0c0c02550ab8fff4b40c0c025509b8fff4b40c0c025503b8ffe840100d0d
06555503770a0212062013213408b8fff0b312273409b8fff0b412273412
05b8fff0b312213409b8fff0408412273406040405040637094704052506
2d0a580a7703750ada03e30607a60601230626072508390638093f0d4f0d
59045906580759097d0479059909c606d204d606e406e907f706f9081512
0a0a05030304020606070909080a0a050908082507061407070603040425
050a1405050a0a09060304080102000405060708080b0b000a04b8010f40
0905040c0c0655052208b8010f401520073f070207100c0c0655071a900d
010d0b0e0b0bb80140b4560b080d0db80140b4560b0c0c0cb80140b7560b
2500020e0b0bb80140b45602080d0db80140b456020c0c0cb80140400e56
022501019000013f004f000200b8fffe40310e0e025500100d0d02550010
0c0c0255000a0b0b025500120b0b065500120c0c065500080d0d06550019
0c0de1214766182b2b4ef42b2b2b2b2b2b2b5d713c4d10ed2b2b2b10ed2b
2b2b4e1071f62b5d4dedf42bed003f3c103c103c3f3c3f3c11173987052e
2b047d10c487052e182b0e7d10c40710083c083c0310083c083cb1060243
5458400d4b09011f0984030209180d1134002b5d7159313001435c58400a
092c1d3909081d1d3c06b8ffdeb21d3906b8ffd4b2203906b8ffd4b12139
2b2b2b2b2b595d00715d0171002b2b435c58b90006ffc0b2213903b8ffc0
b2163903b8ffdeb2103906b8ffdeb2103903b8ffdeb20c3903b8ffdeb10b
392b2b2b2b2b2b59012b2b2b435c584012dd040108141639090814143c09
0814143c06b8fff6b2183906b8ffecb11b392b2b2b2b2b015d59005d2b2b
2b2b2b015d712b2b2b2b2b2b002b2b33113311013301012301071188b401
aae9fe6a01bfdefea17f05bafcbc01b0fe76fd64021f7afe5b00>CUFAAA+ArialMT AddT42Char 
CUFAAA+ArialMT /CharStrings get begin
/g55 55 def
/g78 78 def
end
CUFAAA+ArialMT /Encoding get
dup 68 /g55 put
dup 69 /g78 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XIBTRZ+ArialMT*1 
[32{/.notdef}rp /g39 /g68 /g87 /g3 /g70 /g79 /g88 
/g86 /g72 /g85 /g76 /g81 /g74 /g38 /g16 
/g69 /g71 /g73 /g54 /g92 /g53 /g83 /g82 
/g90 /g36 /g89 /g30 /g48 /g31 /g75 /g49 
/g47 /g58 /g80 /g84 /g60 /g55 /g78 186{/.notdef}rp]
XIBTRZ+ArialMT nf
XIBTRZ+ArialMT*1 [12 0 0 -12 0 0 ]msf
450.96 148.139 mo
(D!'E#\(+0*+,)
[7.32953 6.66962 5.99762 5.99762 3.33362 6.66962 6.66962 6.66962 2.66162 6.66962 0 ]xsh
180 116.94 mo
180 113.04 183.18 109.86 187.08 109.86 cv
191.04 109.86 194.22 113.04 194.22 116.94 cv
194.22 120.84 191.04 124.02 187.08 124.02 cv
183.18 124.02 180 120.84 180 116.94 cv
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
.72 lw
180 116.94 mo
180 113.04 183.18 109.86 187.08 109.86 cv
191.04 109.86 194.22 113.04 194.22 116.94 cv
194.22 120.84 191.04 124.02 187.08 124.02 cv
183.18 124.02 180 120.84 180 116.94 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
187.08 109.859 mo
187.08 124.02 li
@
180 116.94 mo
194.22 116.94 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/XIBTRZ+ArialMT*1 uf
/XIBTRZ+ArialMT uf
/CUFAAA+ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
